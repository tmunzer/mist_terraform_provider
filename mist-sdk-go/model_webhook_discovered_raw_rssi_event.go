/*
Mist API

> Version: **2406.1.9** > > Date: **June 28, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.9
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookDiscoveredRawRssiEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookDiscoveredRawRssiEvent{}

// WebhookDiscoveredRawRssiEvent struct for WebhookDiscoveredRawRssiEvent
type WebhookDiscoveredRawRssiEvent struct {
	// coordinates (if any) of reporting AP (updated once in 60s per client)
	ApLoc []float32 `json:"ap_loc,omitempty"`
	// antenna index, from 1-8, clock-wise starting from the LED
	Beam int32 `json:"beam"`
	// device id of the reporting AP
	DeviceId string `json:"device_id"`
	IbeaconMajor *int32 `json:"ibeacon_major,omitempty"`
	IbeaconMinor *int32 `json:"ibeacon_minor,omitempty"`
	IbeaconUuid *string `json:"ibeacon_uuid,omitempty"`
	IsAsset *bool `json:"is_asset,omitempty"`
	// MAC of the asset/ beacon
	Mac string `json:"mac"`
	MapId string `json:"map_id"`
	// BLE manufacturing company ID
	MfgCompanyId *string `json:"mfg_company_id,omitempty"`
	// BLE manufacturing data in hex byte-string format (ie: “112233AABBCC”)
	MfgData *string `json:"mfg_data,omitempty"`
	OrgId string `json:"org_id"`
	// signal strength
	Rssi float32 `json:"rssi"`
	// list of service data packets heard from the asset/ beacon
	ServicePackets []ServicePacket `json:"service_packets,omitempty"`
	SiteId string `json:"site_id"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookDiscoveredRawRssiEvent WebhookDiscoveredRawRssiEvent

// NewWebhookDiscoveredRawRssiEvent instantiates a new WebhookDiscoveredRawRssiEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookDiscoveredRawRssiEvent(beam int32, deviceId string, mac string, mapId string, orgId string, rssi float32, siteId string) *WebhookDiscoveredRawRssiEvent {
	this := WebhookDiscoveredRawRssiEvent{}
	this.Beam = beam
	this.DeviceId = deviceId
	this.Mac = mac
	this.MapId = mapId
	this.OrgId = orgId
	this.Rssi = rssi
	this.SiteId = siteId
	return &this
}

// NewWebhookDiscoveredRawRssiEventWithDefaults instantiates a new WebhookDiscoveredRawRssiEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookDiscoveredRawRssiEventWithDefaults() *WebhookDiscoveredRawRssiEvent {
	this := WebhookDiscoveredRawRssiEvent{}
	return &this
}

// GetApLoc returns the ApLoc field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetApLoc() []float32 {
	if o == nil || IsNil(o.ApLoc) {
		var ret []float32
		return ret
	}
	return o.ApLoc
}

// GetApLocOk returns a tuple with the ApLoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetApLocOk() ([]float32, bool) {
	if o == nil || IsNil(o.ApLoc) {
		return nil, false
	}
	return o.ApLoc, true
}

// HasApLoc returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasApLoc() bool {
	if o != nil && !IsNil(o.ApLoc) {
		return true
	}

	return false
}

// SetApLoc gets a reference to the given []float32 and assigns it to the ApLoc field.
func (o *WebhookDiscoveredRawRssiEvent) SetApLoc(v []float32) {
	o.ApLoc = v
}

// GetBeam returns the Beam field value
func (o *WebhookDiscoveredRawRssiEvent) GetBeam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Beam
}

// GetBeamOk returns a tuple with the Beam field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetBeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Beam, true
}

// SetBeam sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetBeam(v int32) {
	o.Beam = v
}

// GetDeviceId returns the DeviceId field value
func (o *WebhookDiscoveredRawRssiEvent) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetIbeaconMajor returns the IbeaconMajor field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconMajor() int32 {
	if o == nil || IsNil(o.IbeaconMajor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMajor
}

// GetIbeaconMajorOk returns a tuple with the IbeaconMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMajor) {
		return nil, false
	}
	return o.IbeaconMajor, true
}

// HasIbeaconMajor returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasIbeaconMajor() bool {
	if o != nil && !IsNil(o.IbeaconMajor) {
		return true
	}

	return false
}

// SetIbeaconMajor gets a reference to the given int32 and assigns it to the IbeaconMajor field.
func (o *WebhookDiscoveredRawRssiEvent) SetIbeaconMajor(v int32) {
	o.IbeaconMajor = &v
}

// GetIbeaconMinor returns the IbeaconMinor field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconMinor() int32 {
	if o == nil || IsNil(o.IbeaconMinor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMinor
}

// GetIbeaconMinorOk returns a tuple with the IbeaconMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMinor) {
		return nil, false
	}
	return o.IbeaconMinor, true
}

// HasIbeaconMinor returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasIbeaconMinor() bool {
	if o != nil && !IsNil(o.IbeaconMinor) {
		return true
	}

	return false
}

// SetIbeaconMinor gets a reference to the given int32 and assigns it to the IbeaconMinor field.
func (o *WebhookDiscoveredRawRssiEvent) SetIbeaconMinor(v int32) {
	o.IbeaconMinor = &v
}

// GetIbeaconUuid returns the IbeaconUuid field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconUuid() string {
	if o == nil || IsNil(o.IbeaconUuid) {
		var ret string
		return ret
	}
	return *o.IbeaconUuid
}

// GetIbeaconUuidOk returns a tuple with the IbeaconUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetIbeaconUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IbeaconUuid) {
		return nil, false
	}
	return o.IbeaconUuid, true
}

// HasIbeaconUuid returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasIbeaconUuid() bool {
	if o != nil && !IsNil(o.IbeaconUuid) {
		return true
	}

	return false
}

// SetIbeaconUuid gets a reference to the given string and assigns it to the IbeaconUuid field.
func (o *WebhookDiscoveredRawRssiEvent) SetIbeaconUuid(v string) {
	o.IbeaconUuid = &v
}

// GetIsAsset returns the IsAsset field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetIsAsset() bool {
	if o == nil || IsNil(o.IsAsset) {
		var ret bool
		return ret
	}
	return *o.IsAsset
}

// GetIsAssetOk returns a tuple with the IsAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetIsAssetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAsset) {
		return nil, false
	}
	return o.IsAsset, true
}

// HasIsAsset returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasIsAsset() bool {
	if o != nil && !IsNil(o.IsAsset) {
		return true
	}

	return false
}

// SetIsAsset gets a reference to the given bool and assigns it to the IsAsset field.
func (o *WebhookDiscoveredRawRssiEvent) SetIsAsset(v bool) {
	o.IsAsset = &v
}

// GetMac returns the Mac field value
func (o *WebhookDiscoveredRawRssiEvent) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetMac(v string) {
	o.Mac = v
}

// GetMapId returns the MapId field value
func (o *WebhookDiscoveredRawRssiEvent) GetMapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetMapId(v string) {
	o.MapId = v
}

// GetMfgCompanyId returns the MfgCompanyId field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetMfgCompanyId() string {
	if o == nil || IsNil(o.MfgCompanyId) {
		var ret string
		return ret
	}
	return *o.MfgCompanyId
}

// GetMfgCompanyIdOk returns a tuple with the MfgCompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetMfgCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.MfgCompanyId) {
		return nil, false
	}
	return o.MfgCompanyId, true
}

// HasMfgCompanyId returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasMfgCompanyId() bool {
	if o != nil && !IsNil(o.MfgCompanyId) {
		return true
	}

	return false
}

// SetMfgCompanyId gets a reference to the given string and assigns it to the MfgCompanyId field.
func (o *WebhookDiscoveredRawRssiEvent) SetMfgCompanyId(v string) {
	o.MfgCompanyId = &v
}

// GetMfgData returns the MfgData field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetMfgData() string {
	if o == nil || IsNil(o.MfgData) {
		var ret string
		return ret
	}
	return *o.MfgData
}

// GetMfgDataOk returns a tuple with the MfgData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetMfgDataOk() (*string, bool) {
	if o == nil || IsNil(o.MfgData) {
		return nil, false
	}
	return o.MfgData, true
}

// HasMfgData returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasMfgData() bool {
	if o != nil && !IsNil(o.MfgData) {
		return true
	}

	return false
}

// SetMfgData gets a reference to the given string and assigns it to the MfgData field.
func (o *WebhookDiscoveredRawRssiEvent) SetMfgData(v string) {
	o.MfgData = &v
}

// GetOrgId returns the OrgId field value
func (o *WebhookDiscoveredRawRssiEvent) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetOrgId(v string) {
	o.OrgId = v
}

// GetRssi returns the Rssi field value
func (o *WebhookDiscoveredRawRssiEvent) GetRssi() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetRssiOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rssi, true
}

// SetRssi sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetRssi(v float32) {
	o.Rssi = v
}

// GetServicePackets returns the ServicePackets field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetServicePackets() []ServicePacket {
	if o == nil || IsNil(o.ServicePackets) {
		var ret []ServicePacket
		return ret
	}
	return o.ServicePackets
}

// GetServicePacketsOk returns a tuple with the ServicePackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetServicePacketsOk() ([]ServicePacket, bool) {
	if o == nil || IsNil(o.ServicePackets) {
		return nil, false
	}
	return o.ServicePackets, true
}

// HasServicePackets returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasServicePackets() bool {
	if o != nil && !IsNil(o.ServicePackets) {
		return true
	}

	return false
}

// SetServicePackets gets a reference to the given []ServicePacket and assigns it to the ServicePackets field.
func (o *WebhookDiscoveredRawRssiEvent) SetServicePackets(v []ServicePacket) {
	o.ServicePackets = v
}

// GetSiteId returns the SiteId field value
func (o *WebhookDiscoveredRawRssiEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookDiscoveredRawRssiEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WebhookDiscoveredRawRssiEvent) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDiscoveredRawRssiEvent) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WebhookDiscoveredRawRssiEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *WebhookDiscoveredRawRssiEvent) SetTimestamp(v int32) {
	o.Timestamp = &v
}

func (o WebhookDiscoveredRawRssiEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookDiscoveredRawRssiEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApLoc) {
		toSerialize["ap_loc"] = o.ApLoc
	}
	toSerialize["beam"] = o.Beam
	toSerialize["device_id"] = o.DeviceId
	if !IsNil(o.IbeaconMajor) {
		toSerialize["ibeacon_major"] = o.IbeaconMajor
	}
	if !IsNil(o.IbeaconMinor) {
		toSerialize["ibeacon_minor"] = o.IbeaconMinor
	}
	if !IsNil(o.IbeaconUuid) {
		toSerialize["ibeacon_uuid"] = o.IbeaconUuid
	}
	if !IsNil(o.IsAsset) {
		toSerialize["is_asset"] = o.IsAsset
	}
	toSerialize["mac"] = o.Mac
	toSerialize["map_id"] = o.MapId
	if !IsNil(o.MfgCompanyId) {
		toSerialize["mfg_company_id"] = o.MfgCompanyId
	}
	if !IsNil(o.MfgData) {
		toSerialize["mfg_data"] = o.MfgData
	}
	toSerialize["org_id"] = o.OrgId
	toSerialize["rssi"] = o.Rssi
	if !IsNil(o.ServicePackets) {
		toSerialize["service_packets"] = o.ServicePackets
	}
	toSerialize["site_id"] = o.SiteId
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookDiscoveredRawRssiEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"beam",
		"device_id",
		"mac",
		"map_id",
		"org_id",
		"rssi",
		"site_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookDiscoveredRawRssiEvent := _WebhookDiscoveredRawRssiEvent{}

	err = json.Unmarshal(data, &varWebhookDiscoveredRawRssiEvent)

	if err != nil {
		return err
	}

	*o = WebhookDiscoveredRawRssiEvent(varWebhookDiscoveredRawRssiEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_loc")
		delete(additionalProperties, "beam")
		delete(additionalProperties, "device_id")
		delete(additionalProperties, "ibeacon_major")
		delete(additionalProperties, "ibeacon_minor")
		delete(additionalProperties, "ibeacon_uuid")
		delete(additionalProperties, "is_asset")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "mfg_company_id")
		delete(additionalProperties, "mfg_data")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "service_packets")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookDiscoveredRawRssiEvent struct {
	value *WebhookDiscoveredRawRssiEvent
	isSet bool
}

func (v NullableWebhookDiscoveredRawRssiEvent) Get() *WebhookDiscoveredRawRssiEvent {
	return v.value
}

func (v *NullableWebhookDiscoveredRawRssiEvent) Set(val *WebhookDiscoveredRawRssiEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookDiscoveredRawRssiEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookDiscoveredRawRssiEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookDiscoveredRawRssiEvent(val *WebhookDiscoveredRawRssiEvent) *NullableWebhookDiscoveredRawRssiEvent {
	return &NullableWebhookDiscoveredRawRssiEvent{value: val, isSet: true}
}

func (v NullableWebhookDiscoveredRawRssiEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookDiscoveredRawRssiEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


