/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// RemoteSyslogContentFacility the model 'RemoteSyslogContentFacility'
type RemoteSyslogContentFacility string

// List of remote_syslog_content_facility
const (
	REMOTESYSLOGCONTENTFACILITY_ANY RemoteSyslogContentFacility = "any"
	REMOTESYSLOGCONTENTFACILITY_AUTHORIZATION RemoteSyslogContentFacility = "authorization"
	REMOTESYSLOGCONTENTFACILITY_CONFLICT_LOG RemoteSyslogContentFacility = "conflict-log"
	REMOTESYSLOGCONTENTFACILITY_CHANGE_LOG RemoteSyslogContentFacility = "change-log"
	REMOTESYSLOGCONTENTFACILITY_CONFIG RemoteSyslogContentFacility = "config"
	REMOTESYSLOGCONTENTFACILITY_DAEMON RemoteSyslogContentFacility = "daemon"
	REMOTESYSLOGCONTENTFACILITY_DFC RemoteSyslogContentFacility = "dfc"
	REMOTESYSLOGCONTENTFACILITY_KERNEL RemoteSyslogContentFacility = "kernel"
	REMOTESYSLOGCONTENTFACILITY_INTERACTIVE_COMMANDS RemoteSyslogContentFacility = "interactive-commands"
	REMOTESYSLOGCONTENTFACILITY_FTP RemoteSyslogContentFacility = "ftp"
	REMOTESYSLOGCONTENTFACILITY_FIREWALL RemoteSyslogContentFacility = "firewall"
	REMOTESYSLOGCONTENTFACILITY_EXTERNAL RemoteSyslogContentFacility = "external"
	REMOTESYSLOGCONTENTFACILITY_PFE RemoteSyslogContentFacility = "pfe"
	REMOTESYSLOGCONTENTFACILITY_NTP RemoteSyslogContentFacility = "ntp"
	REMOTESYSLOGCONTENTFACILITY_SECURITY RemoteSyslogContentFacility = "security"
	REMOTESYSLOGCONTENTFACILITY_USER RemoteSyslogContentFacility = "user"
)

// All allowed values of RemoteSyslogContentFacility enum
var AllowedRemoteSyslogContentFacilityEnumValues = []RemoteSyslogContentFacility{
	"any",
	"authorization",
	"conflict-log",
	"change-log",
	"config",
	"daemon",
	"dfc",
	"kernel",
	"interactive-commands",
	"ftp",
	"firewall",
	"external",
	"pfe",
	"ntp",
	"security",
	"user",
}

func (v *RemoteSyslogContentFacility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RemoteSyslogContentFacility(value)
	for _, existing := range AllowedRemoteSyslogContentFacilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RemoteSyslogContentFacility", value)
}

// NewRemoteSyslogContentFacilityFromValue returns a pointer to a valid RemoteSyslogContentFacility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteSyslogContentFacilityFromValue(v string) (*RemoteSyslogContentFacility, error) {
	ev := RemoteSyslogContentFacility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteSyslogContentFacility: valid values are %v", v, AllowedRemoteSyslogContentFacilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteSyslogContentFacility) IsValid() bool {
	for _, existing := range AllowedRemoteSyslogContentFacilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to remote_syslog_content_facility value
func (v RemoteSyslogContentFacility) Ptr() *RemoteSyslogContentFacility {
	return &v
}

type NullableRemoteSyslogContentFacility struct {
	value *RemoteSyslogContentFacility
	isSet bool
}

func (v NullableRemoteSyslogContentFacility) Get() *RemoteSyslogContentFacility {
	return v.value
}

func (v *NullableRemoteSyslogContentFacility) Set(val *RemoteSyslogContentFacility) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslogContentFacility) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslogContentFacility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslogContentFacility(val *RemoteSyslogContentFacility) *NullableRemoteSyslogContentFacility {
	return &NullableRemoteSyslogContentFacility{value: val, isSet: true}
}

func (v NullableRemoteSyslogContentFacility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslogContentFacility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

