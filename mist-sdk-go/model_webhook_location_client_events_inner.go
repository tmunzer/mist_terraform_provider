/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WebhookLocationClientEventsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookLocationClientEventsInner{}

// WebhookLocationClientEventsInner struct for WebhookLocationClientEventsInner
type WebhookLocationClientEventsInner struct {
	Mac *string `json:"mac,omitempty"`
	MapId *string `json:"map_id,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	Type *string `json:"type,omitempty"`
	// optional, list of extended beacon info packets heard from the client, frame and sequence control included with the payload
	WifiBeaconExtendedInfo []WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner `json:"wifi_beacon_extended_info,omitempty"`
	// x, in meter
	X *float32 `json:"x,omitempty"`
	// y, in meter
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookLocationClientEventsInner WebhookLocationClientEventsInner

// NewWebhookLocationClientEventsInner instantiates a new WebhookLocationClientEventsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookLocationClientEventsInner() *WebhookLocationClientEventsInner {
	this := WebhookLocationClientEventsInner{}
	var type_ string = "wifi"
	this.Type = &type_
	return &this
}

// NewWebhookLocationClientEventsInnerWithDefaults instantiates a new WebhookLocationClientEventsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookLocationClientEventsInnerWithDefaults() *WebhookLocationClientEventsInner {
	this := WebhookLocationClientEventsInner{}
	var type_ string = "wifi"
	this.Type = &type_
	return &this
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *WebhookLocationClientEventsInner) SetMac(v string) {
	o.Mac = &v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *WebhookLocationClientEventsInner) SetMapId(v string) {
	o.MapId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *WebhookLocationClientEventsInner) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *WebhookLocationClientEventsInner) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebhookLocationClientEventsInner) SetType(v string) {
	o.Type = &v
}

// GetWifiBeaconExtendedInfo returns the WifiBeaconExtendedInfo field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetWifiBeaconExtendedInfo() []WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner {
	if o == nil || IsNil(o.WifiBeaconExtendedInfo) {
		var ret []WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner
		return ret
	}
	return o.WifiBeaconExtendedInfo
}

// GetWifiBeaconExtendedInfoOk returns a tuple with the WifiBeaconExtendedInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetWifiBeaconExtendedInfoOk() ([]WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner, bool) {
	if o == nil || IsNil(o.WifiBeaconExtendedInfo) {
		return nil, false
	}
	return o.WifiBeaconExtendedInfo, true
}

// HasWifiBeaconExtendedInfo returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasWifiBeaconExtendedInfo() bool {
	if o != nil && !IsNil(o.WifiBeaconExtendedInfo) {
		return true
	}

	return false
}

// SetWifiBeaconExtendedInfo gets a reference to the given []WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner and assigns it to the WifiBeaconExtendedInfo field.
func (o *WebhookLocationClientEventsInner) SetWifiBeaconExtendedInfo(v []WebhookLocationClientEventsInnerWifiBeaconExtendedInfoInner) {
	o.WifiBeaconExtendedInfo = v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *WebhookLocationClientEventsInner) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *WebhookLocationClientEventsInner) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationClientEventsInner) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *WebhookLocationClientEventsInner) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *WebhookLocationClientEventsInner) SetY(v float32) {
	o.Y = &v
}

func (o WebhookLocationClientEventsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookLocationClientEventsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WifiBeaconExtendedInfo) {
		toSerialize["wifi_beacon_extended_info"] = o.WifiBeaconExtendedInfo
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookLocationClientEventsInner) UnmarshalJSON(data []byte) (err error) {
	varWebhookLocationClientEventsInner := _WebhookLocationClientEventsInner{}

	err = json.Unmarshal(data, &varWebhookLocationClientEventsInner)

	if err != nil {
		return err
	}

	*o = WebhookLocationClientEventsInner(varWebhookLocationClientEventsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		delete(additionalProperties, "wifi_beacon_extended_info")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookLocationClientEventsInner struct {
	value *WebhookLocationClientEventsInner
	isSet bool
}

func (v NullableWebhookLocationClientEventsInner) Get() *WebhookLocationClientEventsInner {
	return v.value
}

func (v *NullableWebhookLocationClientEventsInner) Set(val *WebhookLocationClientEventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookLocationClientEventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookLocationClientEventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookLocationClientEventsInner(val *WebhookLocationClientEventsInner) *NullableWebhookLocationClientEventsInner {
	return &NullableWebhookLocationClientEventsInner{value: val, isSet: true}
}

func (v NullableWebhookLocationClientEventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookLocationClientEventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


