/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosBgpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosBgpConfig{}

// JunosBgpConfig BFD is enabled when either bfd_minimum_interval or bfd_multiplier is configured
type JunosBgpConfig struct {
	AuthKey *string `json:"auth_key,omitempty"`
	// when bfd_multiplier is configured alone default: * 1000 if `type`==`external`` * 350 `type`==`internal`
	BfdMinimumInterval NullableInt32 `json:"bfd_minimum_interval,omitempty"`
	// when bfd_minimum_interval_is_configured alone
	BfdMultiplier NullableInt32 `json:"bfd_multiplier,omitempty"`
	Communities []JunosBgpCommunity `json:"communities,omitempty"`
	// BFD provides faster path failure detection and is enabled by default
	DisableBfd *bool `json:"disable_bfd,omitempty"`
	Export *string `json:"export,omitempty"`
	// default export policies if no per-neighbor policies defined
	ExportPolicy *string `json:"export_policy,omitempty"`
	// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6) for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
	ExtendedV4Nexthop *bool `json:"extended_v4_nexthop,omitempty"`
	// `0` means disable
	GracefulRestartTime *int32 `json:"graceful_restart_time,omitempty"`
	HoldTime *int32 `json:"hold_time,omitempty"`
	Import *string `json:"import,omitempty"`
	// default import policies if no per-neighbor policies defined
	ImportPolicy *string `json:"import_policy,omitempty"`
	LocalAs *int32 `json:"local_as,omitempty"`
	NeighborAs *int32 `json:"neighbor_as,omitempty"`
	// if per-neighbor as is desired. Property key is the neighbor address
	Neighbors *map[string]JunosBgpNeighbor `json:"neighbors,omitempty"`
	// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
	Networks []string `json:"networks,omitempty"`
	// by default, we'll re-advertise all learned BGP routers toward overlay
	NoReadvertiseToOverlay *bool `json:"no_readvertise_to_overlay,omitempty"`
	Type *string `json:"type,omitempty"`
	// network name
	Via *string `json:"via,omitempty"`
	VpnName *string `json:"vpn_name,omitempty"`
	// if `via`==`wan`
	WanName *string `json:"wan_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosBgpConfig JunosBgpConfig

// NewJunosBgpConfig instantiates a new JunosBgpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosBgpConfig() *JunosBgpConfig {
	this := JunosBgpConfig{}
	var bfdMinimumInterval int32 = 350
	this.BfdMinimumInterval = *NewNullableInt32(&bfdMinimumInterval)
	var bfdMultiplier int32 = 3
	this.BfdMultiplier = *NewNullableInt32(&bfdMultiplier)
	var disableBfd bool = false
	this.DisableBfd = &disableBfd
	var gracefulRestartTime int32 = 0
	this.GracefulRestartTime = &gracefulRestartTime
	var holdTime int32 = 90
	this.HoldTime = &holdTime
	var noReadvertiseToOverlay bool = false
	this.NoReadvertiseToOverlay = &noReadvertiseToOverlay
	var via string = "lan"
	this.Via = &via
	return &this
}

// NewJunosBgpConfigWithDefaults instantiates a new JunosBgpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosBgpConfigWithDefaults() *JunosBgpConfig {
	this := JunosBgpConfig{}
	var bfdMinimumInterval int32 = 350
	this.BfdMinimumInterval = *NewNullableInt32(&bfdMinimumInterval)
	var bfdMultiplier int32 = 3
	this.BfdMultiplier = *NewNullableInt32(&bfdMultiplier)
	var disableBfd bool = false
	this.DisableBfd = &disableBfd
	var gracefulRestartTime int32 = 0
	this.GracefulRestartTime = &gracefulRestartTime
	var holdTime int32 = 90
	this.HoldTime = &holdTime
	var noReadvertiseToOverlay bool = false
	this.NoReadvertiseToOverlay = &noReadvertiseToOverlay
	var via string = "lan"
	this.Via = &via
	return &this
}

// GetAuthKey returns the AuthKey field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetAuthKey() string {
	if o == nil || IsNil(o.AuthKey) {
		var ret string
		return ret
	}
	return *o.AuthKey
}

// GetAuthKeyOk returns a tuple with the AuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetAuthKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthKey) {
		return nil, false
	}
	return o.AuthKey, true
}

// HasAuthKey returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasAuthKey() bool {
	if o != nil && !IsNil(o.AuthKey) {
		return true
	}

	return false
}

// SetAuthKey gets a reference to the given string and assigns it to the AuthKey field.
func (o *JunosBgpConfig) SetAuthKey(v string) {
	o.AuthKey = &v
}

// GetBfdMinimumInterval returns the BfdMinimumInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JunosBgpConfig) GetBfdMinimumInterval() int32 {
	if o == nil || IsNil(o.BfdMinimumInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.BfdMinimumInterval.Get()
}

// GetBfdMinimumIntervalOk returns a tuple with the BfdMinimumInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JunosBgpConfig) GetBfdMinimumIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BfdMinimumInterval.Get(), o.BfdMinimumInterval.IsSet()
}

// HasBfdMinimumInterval returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasBfdMinimumInterval() bool {
	if o != nil && o.BfdMinimumInterval.IsSet() {
		return true
	}

	return false
}

// SetBfdMinimumInterval gets a reference to the given NullableInt32 and assigns it to the BfdMinimumInterval field.
func (o *JunosBgpConfig) SetBfdMinimumInterval(v int32) {
	o.BfdMinimumInterval.Set(&v)
}
// SetBfdMinimumIntervalNil sets the value for BfdMinimumInterval to be an explicit nil
func (o *JunosBgpConfig) SetBfdMinimumIntervalNil() {
	o.BfdMinimumInterval.Set(nil)
}

// UnsetBfdMinimumInterval ensures that no value is present for BfdMinimumInterval, not even an explicit nil
func (o *JunosBgpConfig) UnsetBfdMinimumInterval() {
	o.BfdMinimumInterval.Unset()
}

// GetBfdMultiplier returns the BfdMultiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JunosBgpConfig) GetBfdMultiplier() int32 {
	if o == nil || IsNil(o.BfdMultiplier.Get()) {
		var ret int32
		return ret
	}
	return *o.BfdMultiplier.Get()
}

// GetBfdMultiplierOk returns a tuple with the BfdMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JunosBgpConfig) GetBfdMultiplierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BfdMultiplier.Get(), o.BfdMultiplier.IsSet()
}

// HasBfdMultiplier returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasBfdMultiplier() bool {
	if o != nil && o.BfdMultiplier.IsSet() {
		return true
	}

	return false
}

// SetBfdMultiplier gets a reference to the given NullableInt32 and assigns it to the BfdMultiplier field.
func (o *JunosBgpConfig) SetBfdMultiplier(v int32) {
	o.BfdMultiplier.Set(&v)
}
// SetBfdMultiplierNil sets the value for BfdMultiplier to be an explicit nil
func (o *JunosBgpConfig) SetBfdMultiplierNil() {
	o.BfdMultiplier.Set(nil)
}

// UnsetBfdMultiplier ensures that no value is present for BfdMultiplier, not even an explicit nil
func (o *JunosBgpConfig) UnsetBfdMultiplier() {
	o.BfdMultiplier.Unset()
}

// GetCommunities returns the Communities field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetCommunities() []JunosBgpCommunity {
	if o == nil || IsNil(o.Communities) {
		var ret []JunosBgpCommunity
		return ret
	}
	return o.Communities
}

// GetCommunitiesOk returns a tuple with the Communities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetCommunitiesOk() ([]JunosBgpCommunity, bool) {
	if o == nil || IsNil(o.Communities) {
		return nil, false
	}
	return o.Communities, true
}

// HasCommunities returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasCommunities() bool {
	if o != nil && !IsNil(o.Communities) {
		return true
	}

	return false
}

// SetCommunities gets a reference to the given []JunosBgpCommunity and assigns it to the Communities field.
func (o *JunosBgpConfig) SetCommunities(v []JunosBgpCommunity) {
	o.Communities = v
}

// GetDisableBfd returns the DisableBfd field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetDisableBfd() bool {
	if o == nil || IsNil(o.DisableBfd) {
		var ret bool
		return ret
	}
	return *o.DisableBfd
}

// GetDisableBfdOk returns a tuple with the DisableBfd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetDisableBfdOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableBfd) {
		return nil, false
	}
	return o.DisableBfd, true
}

// HasDisableBfd returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasDisableBfd() bool {
	if o != nil && !IsNil(o.DisableBfd) {
		return true
	}

	return false
}

// SetDisableBfd gets a reference to the given bool and assigns it to the DisableBfd field.
func (o *JunosBgpConfig) SetDisableBfd(v bool) {
	o.DisableBfd = &v
}

// GetExport returns the Export field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetExport() string {
	if o == nil || IsNil(o.Export) {
		var ret string
		return ret
	}
	return *o.Export
}

// GetExportOk returns a tuple with the Export field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetExportOk() (*string, bool) {
	if o == nil || IsNil(o.Export) {
		return nil, false
	}
	return o.Export, true
}

// HasExport returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasExport() bool {
	if o != nil && !IsNil(o.Export) {
		return true
	}

	return false
}

// SetExport gets a reference to the given string and assigns it to the Export field.
func (o *JunosBgpConfig) SetExport(v string) {
	o.Export = &v
}

// GetExportPolicy returns the ExportPolicy field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetExportPolicy() string {
	if o == nil || IsNil(o.ExportPolicy) {
		var ret string
		return ret
	}
	return *o.ExportPolicy
}

// GetExportPolicyOk returns a tuple with the ExportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetExportPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ExportPolicy) {
		return nil, false
	}
	return o.ExportPolicy, true
}

// HasExportPolicy returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasExportPolicy() bool {
	if o != nil && !IsNil(o.ExportPolicy) {
		return true
	}

	return false
}

// SetExportPolicy gets a reference to the given string and assigns it to the ExportPolicy field.
func (o *JunosBgpConfig) SetExportPolicy(v string) {
	o.ExportPolicy = &v
}

// GetExtendedV4Nexthop returns the ExtendedV4Nexthop field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetExtendedV4Nexthop() bool {
	if o == nil || IsNil(o.ExtendedV4Nexthop) {
		var ret bool
		return ret
	}
	return *o.ExtendedV4Nexthop
}

// GetExtendedV4NexthopOk returns a tuple with the ExtendedV4Nexthop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetExtendedV4NexthopOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtendedV4Nexthop) {
		return nil, false
	}
	return o.ExtendedV4Nexthop, true
}

// HasExtendedV4Nexthop returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasExtendedV4Nexthop() bool {
	if o != nil && !IsNil(o.ExtendedV4Nexthop) {
		return true
	}

	return false
}

// SetExtendedV4Nexthop gets a reference to the given bool and assigns it to the ExtendedV4Nexthop field.
func (o *JunosBgpConfig) SetExtendedV4Nexthop(v bool) {
	o.ExtendedV4Nexthop = &v
}

// GetGracefulRestartTime returns the GracefulRestartTime field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetGracefulRestartTime() int32 {
	if o == nil || IsNil(o.GracefulRestartTime) {
		var ret int32
		return ret
	}
	return *o.GracefulRestartTime
}

// GetGracefulRestartTimeOk returns a tuple with the GracefulRestartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetGracefulRestartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.GracefulRestartTime) {
		return nil, false
	}
	return o.GracefulRestartTime, true
}

// HasGracefulRestartTime returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasGracefulRestartTime() bool {
	if o != nil && !IsNil(o.GracefulRestartTime) {
		return true
	}

	return false
}

// SetGracefulRestartTime gets a reference to the given int32 and assigns it to the GracefulRestartTime field.
func (o *JunosBgpConfig) SetGracefulRestartTime(v int32) {
	o.GracefulRestartTime = &v
}

// GetHoldTime returns the HoldTime field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetHoldTime() int32 {
	if o == nil || IsNil(o.HoldTime) {
		var ret int32
		return ret
	}
	return *o.HoldTime
}

// GetHoldTimeOk returns a tuple with the HoldTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetHoldTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.HoldTime) {
		return nil, false
	}
	return o.HoldTime, true
}

// HasHoldTime returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasHoldTime() bool {
	if o != nil && !IsNil(o.HoldTime) {
		return true
	}

	return false
}

// SetHoldTime gets a reference to the given int32 and assigns it to the HoldTime field.
func (o *JunosBgpConfig) SetHoldTime(v int32) {
	o.HoldTime = &v
}

// GetImport returns the Import field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetImport() string {
	if o == nil || IsNil(o.Import) {
		var ret string
		return ret
	}
	return *o.Import
}

// GetImportOk returns a tuple with the Import field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetImportOk() (*string, bool) {
	if o == nil || IsNil(o.Import) {
		return nil, false
	}
	return o.Import, true
}

// HasImport returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasImport() bool {
	if o != nil && !IsNil(o.Import) {
		return true
	}

	return false
}

// SetImport gets a reference to the given string and assigns it to the Import field.
func (o *JunosBgpConfig) SetImport(v string) {
	o.Import = &v
}

// GetImportPolicy returns the ImportPolicy field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetImportPolicy() string {
	if o == nil || IsNil(o.ImportPolicy) {
		var ret string
		return ret
	}
	return *o.ImportPolicy
}

// GetImportPolicyOk returns a tuple with the ImportPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetImportPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ImportPolicy) {
		return nil, false
	}
	return o.ImportPolicy, true
}

// HasImportPolicy returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasImportPolicy() bool {
	if o != nil && !IsNil(o.ImportPolicy) {
		return true
	}

	return false
}

// SetImportPolicy gets a reference to the given string and assigns it to the ImportPolicy field.
func (o *JunosBgpConfig) SetImportPolicy(v string) {
	o.ImportPolicy = &v
}

// GetLocalAs returns the LocalAs field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetLocalAs() int32 {
	if o == nil || IsNil(o.LocalAs) {
		var ret int32
		return ret
	}
	return *o.LocalAs
}

// GetLocalAsOk returns a tuple with the LocalAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetLocalAsOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalAs) {
		return nil, false
	}
	return o.LocalAs, true
}

// HasLocalAs returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasLocalAs() bool {
	if o != nil && !IsNil(o.LocalAs) {
		return true
	}

	return false
}

// SetLocalAs gets a reference to the given int32 and assigns it to the LocalAs field.
func (o *JunosBgpConfig) SetLocalAs(v int32) {
	o.LocalAs = &v
}

// GetNeighborAs returns the NeighborAs field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetNeighborAs() int32 {
	if o == nil || IsNil(o.NeighborAs) {
		var ret int32
		return ret
	}
	return *o.NeighborAs
}

// GetNeighborAsOk returns a tuple with the NeighborAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetNeighborAsOk() (*int32, bool) {
	if o == nil || IsNil(o.NeighborAs) {
		return nil, false
	}
	return o.NeighborAs, true
}

// HasNeighborAs returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasNeighborAs() bool {
	if o != nil && !IsNil(o.NeighborAs) {
		return true
	}

	return false
}

// SetNeighborAs gets a reference to the given int32 and assigns it to the NeighborAs field.
func (o *JunosBgpConfig) SetNeighborAs(v int32) {
	o.NeighborAs = &v
}

// GetNeighbors returns the Neighbors field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetNeighbors() map[string]JunosBgpNeighbor {
	if o == nil || IsNil(o.Neighbors) {
		var ret map[string]JunosBgpNeighbor
		return ret
	}
	return *o.Neighbors
}

// GetNeighborsOk returns a tuple with the Neighbors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetNeighborsOk() (*map[string]JunosBgpNeighbor, bool) {
	if o == nil || IsNil(o.Neighbors) {
		return nil, false
	}
	return o.Neighbors, true
}

// HasNeighbors returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasNeighbors() bool {
	if o != nil && !IsNil(o.Neighbors) {
		return true
	}

	return false
}

// SetNeighbors gets a reference to the given map[string]JunosBgpNeighbor and assigns it to the Neighbors field.
func (o *JunosBgpConfig) SetNeighbors(v map[string]JunosBgpNeighbor) {
	o.Neighbors = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetNetworks() []string {
	if o == nil || IsNil(o.Networks) {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *JunosBgpConfig) SetNetworks(v []string) {
	o.Networks = v
}

// GetNoReadvertiseToOverlay returns the NoReadvertiseToOverlay field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetNoReadvertiseToOverlay() bool {
	if o == nil || IsNil(o.NoReadvertiseToOverlay) {
		var ret bool
		return ret
	}
	return *o.NoReadvertiseToOverlay
}

// GetNoReadvertiseToOverlayOk returns a tuple with the NoReadvertiseToOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetNoReadvertiseToOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.NoReadvertiseToOverlay) {
		return nil, false
	}
	return o.NoReadvertiseToOverlay, true
}

// HasNoReadvertiseToOverlay returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasNoReadvertiseToOverlay() bool {
	if o != nil && !IsNil(o.NoReadvertiseToOverlay) {
		return true
	}

	return false
}

// SetNoReadvertiseToOverlay gets a reference to the given bool and assigns it to the NoReadvertiseToOverlay field.
func (o *JunosBgpConfig) SetNoReadvertiseToOverlay(v bool) {
	o.NoReadvertiseToOverlay = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JunosBgpConfig) SetType(v string) {
	o.Type = &v
}

// GetVia returns the Via field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetVia() string {
	if o == nil || IsNil(o.Via) {
		var ret string
		return ret
	}
	return *o.Via
}

// GetViaOk returns a tuple with the Via field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetViaOk() (*string, bool) {
	if o == nil || IsNil(o.Via) {
		return nil, false
	}
	return o.Via, true
}

// HasVia returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasVia() bool {
	if o != nil && !IsNil(o.Via) {
		return true
	}

	return false
}

// SetVia gets a reference to the given string and assigns it to the Via field.
func (o *JunosBgpConfig) SetVia(v string) {
	o.Via = &v
}

// GetVpnName returns the VpnName field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetVpnName() string {
	if o == nil || IsNil(o.VpnName) {
		var ret string
		return ret
	}
	return *o.VpnName
}

// GetVpnNameOk returns a tuple with the VpnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetVpnNameOk() (*string, bool) {
	if o == nil || IsNil(o.VpnName) {
		return nil, false
	}
	return o.VpnName, true
}

// HasVpnName returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasVpnName() bool {
	if o != nil && !IsNil(o.VpnName) {
		return true
	}

	return false
}

// SetVpnName gets a reference to the given string and assigns it to the VpnName field.
func (o *JunosBgpConfig) SetVpnName(v string) {
	o.VpnName = &v
}

// GetWanName returns the WanName field value if set, zero value otherwise.
func (o *JunosBgpConfig) GetWanName() string {
	if o == nil || IsNil(o.WanName) {
		var ret string
		return ret
	}
	return *o.WanName
}

// GetWanNameOk returns a tuple with the WanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosBgpConfig) GetWanNameOk() (*string, bool) {
	if o == nil || IsNil(o.WanName) {
		return nil, false
	}
	return o.WanName, true
}

// HasWanName returns a boolean if a field has been set.
func (o *JunosBgpConfig) HasWanName() bool {
	if o != nil && !IsNil(o.WanName) {
		return true
	}

	return false
}

// SetWanName gets a reference to the given string and assigns it to the WanName field.
func (o *JunosBgpConfig) SetWanName(v string) {
	o.WanName = &v
}

func (o JunosBgpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosBgpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthKey) {
		toSerialize["auth_key"] = o.AuthKey
	}
	if o.BfdMinimumInterval.IsSet() {
		toSerialize["bfd_minimum_interval"] = o.BfdMinimumInterval.Get()
	}
	if o.BfdMultiplier.IsSet() {
		toSerialize["bfd_multiplier"] = o.BfdMultiplier.Get()
	}
	if !IsNil(o.Communities) {
		toSerialize["communities"] = o.Communities
	}
	if !IsNil(o.DisableBfd) {
		toSerialize["disable_bfd"] = o.DisableBfd
	}
	if !IsNil(o.Export) {
		toSerialize["export"] = o.Export
	}
	if !IsNil(o.ExportPolicy) {
		toSerialize["export_policy"] = o.ExportPolicy
	}
	if !IsNil(o.ExtendedV4Nexthop) {
		toSerialize["extended_v4_nexthop"] = o.ExtendedV4Nexthop
	}
	if !IsNil(o.GracefulRestartTime) {
		toSerialize["graceful_restart_time"] = o.GracefulRestartTime
	}
	if !IsNil(o.HoldTime) {
		toSerialize["hold_time"] = o.HoldTime
	}
	if !IsNil(o.Import) {
		toSerialize["import"] = o.Import
	}
	if !IsNil(o.ImportPolicy) {
		toSerialize["import_policy"] = o.ImportPolicy
	}
	if !IsNil(o.LocalAs) {
		toSerialize["local_as"] = o.LocalAs
	}
	if !IsNil(o.NeighborAs) {
		toSerialize["neighbor_as"] = o.NeighborAs
	}
	if !IsNil(o.Neighbors) {
		toSerialize["neighbors"] = o.Neighbors
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.NoReadvertiseToOverlay) {
		toSerialize["no_readvertise_to_overlay"] = o.NoReadvertiseToOverlay
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Via) {
		toSerialize["via"] = o.Via
	}
	if !IsNil(o.VpnName) {
		toSerialize["vpn_name"] = o.VpnName
	}
	if !IsNil(o.WanName) {
		toSerialize["wan_name"] = o.WanName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosBgpConfig) UnmarshalJSON(data []byte) (err error) {
	varJunosBgpConfig := _JunosBgpConfig{}

	err = json.Unmarshal(data, &varJunosBgpConfig)

	if err != nil {
		return err
	}

	*o = JunosBgpConfig(varJunosBgpConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth_key")
		delete(additionalProperties, "bfd_minimum_interval")
		delete(additionalProperties, "bfd_multiplier")
		delete(additionalProperties, "communities")
		delete(additionalProperties, "disable_bfd")
		delete(additionalProperties, "export")
		delete(additionalProperties, "export_policy")
		delete(additionalProperties, "extended_v4_nexthop")
		delete(additionalProperties, "graceful_restart_time")
		delete(additionalProperties, "hold_time")
		delete(additionalProperties, "import")
		delete(additionalProperties, "import_policy")
		delete(additionalProperties, "local_as")
		delete(additionalProperties, "neighbor_as")
		delete(additionalProperties, "neighbors")
		delete(additionalProperties, "networks")
		delete(additionalProperties, "no_readvertise_to_overlay")
		delete(additionalProperties, "type")
		delete(additionalProperties, "via")
		delete(additionalProperties, "vpn_name")
		delete(additionalProperties, "wan_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosBgpConfig struct {
	value *JunosBgpConfig
	isSet bool
}

func (v NullableJunosBgpConfig) Get() *JunosBgpConfig {
	return v.value
}

func (v *NullableJunosBgpConfig) Set(val *JunosBgpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosBgpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosBgpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosBgpConfig(val *JunosBgpConfig) *NullableJunosBgpConfig {
	return &NullableJunosBgpConfig{value: val, isSet: true}
}

func (v NullableJunosBgpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosBgpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


