/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookOccupancyAlertsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookOccupancyAlertsEvent{}

// WebhookOccupancyAlertsEvent struct for WebhookOccupancyAlertsEvent
type WebhookOccupancyAlertsEvent struct {
	// list of occupancy alerts for non-compliance zones within the site detected around the same time
	AlertEvents []WebhookOccupancyAlertsEventAlertEventsItems `json:"alert_events,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	SiteId string `json:"site_id"`
	SiteName string `json:"site_name"`
	AdditionalProperties map[string]interface{}
}

type _WebhookOccupancyAlertsEvent WebhookOccupancyAlertsEvent

// NewWebhookOccupancyAlertsEvent instantiates a new WebhookOccupancyAlertsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookOccupancyAlertsEvent(siteId string, siteName string) *WebhookOccupancyAlertsEvent {
	this := WebhookOccupancyAlertsEvent{}
	this.SiteId = siteId
	this.SiteName = siteName
	return &this
}

// NewWebhookOccupancyAlertsEventWithDefaults instantiates a new WebhookOccupancyAlertsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookOccupancyAlertsEventWithDefaults() *WebhookOccupancyAlertsEvent {
	this := WebhookOccupancyAlertsEvent{}
	return &this
}

// GetAlertEvents returns the AlertEvents field value if set, zero value otherwise.
func (o *WebhookOccupancyAlertsEvent) GetAlertEvents() []WebhookOccupancyAlertsEventAlertEventsItems {
	if o == nil || IsNil(o.AlertEvents) {
		var ret []WebhookOccupancyAlertsEventAlertEventsItems
		return ret
	}
	return o.AlertEvents
}

// GetAlertEventsOk returns a tuple with the AlertEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookOccupancyAlertsEvent) GetAlertEventsOk() ([]WebhookOccupancyAlertsEventAlertEventsItems, bool) {
	if o == nil || IsNil(o.AlertEvents) {
		return nil, false
	}
	return o.AlertEvents, true
}

// HasAlertEvents returns a boolean if a field has been set.
func (o *WebhookOccupancyAlertsEvent) HasAlertEvents() bool {
	if o != nil && !IsNil(o.AlertEvents) {
		return true
	}

	return false
}

// SetAlertEvents gets a reference to the given []WebhookOccupancyAlertsEventAlertEventsItems and assigns it to the AlertEvents field.
func (o *WebhookOccupancyAlertsEvent) SetAlertEvents(v []WebhookOccupancyAlertsEventAlertEventsItems) {
	o.AlertEvents = v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *WebhookOccupancyAlertsEvent) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookOccupancyAlertsEvent) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *WebhookOccupancyAlertsEvent) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *WebhookOccupancyAlertsEvent) SetForSite(v bool) {
	o.ForSite = &v
}

// GetSiteId returns the SiteId field value
func (o *WebhookOccupancyAlertsEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookOccupancyAlertsEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookOccupancyAlertsEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetSiteName returns the SiteName field value
func (o *WebhookOccupancyAlertsEvent) GetSiteName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value
// and a boolean to check if the value has been set.
func (o *WebhookOccupancyAlertsEvent) GetSiteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteName, true
}

// SetSiteName sets field value
func (o *WebhookOccupancyAlertsEvent) SetSiteName(v string) {
	o.SiteName = v
}

func (o WebhookOccupancyAlertsEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookOccupancyAlertsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertEvents) {
		toSerialize["alert_events"] = o.AlertEvents
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	toSerialize["site_id"] = o.SiteId
	toSerialize["site_name"] = o.SiteName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookOccupancyAlertsEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"site_id",
		"site_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookOccupancyAlertsEvent := _WebhookOccupancyAlertsEvent{}

	err = json.Unmarshal(data, &varWebhookOccupancyAlertsEvent)

	if err != nil {
		return err
	}

	*o = WebhookOccupancyAlertsEvent(varWebhookOccupancyAlertsEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alert_events")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "site_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookOccupancyAlertsEvent struct {
	value *WebhookOccupancyAlertsEvent
	isSet bool
}

func (v NullableWebhookOccupancyAlertsEvent) Get() *WebhookOccupancyAlertsEvent {
	return v.value
}

func (v *NullableWebhookOccupancyAlertsEvent) Set(val *WebhookOccupancyAlertsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookOccupancyAlertsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookOccupancyAlertsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookOccupancyAlertsEvent(val *WebhookOccupancyAlertsEvent) *NullableWebhookOccupancyAlertsEvent {
	return &NullableWebhookOccupancyAlertsEvent{value: val, isSet: true}
}

func (v NullableWebhookOccupancyAlertsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookOccupancyAlertsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


