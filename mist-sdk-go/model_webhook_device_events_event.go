/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookDeviceEventsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookDeviceEventsEvent{}

// WebhookDeviceEventsEvent struct for WebhookDeviceEventsEvent
type WebhookDeviceEventsEvent struct {
	// (will be deprecated soon; please use mac instead) ap mac
	Ap *string `json:"ap,omitempty"`
	// (will be deprecated soon; please use device_name instead) ap name
	ApName *string `json:"ap_name,omitempty"`
	// (optional) audit id
	AuditId *string `json:"audit_id,omitempty"`
	// device name
	DeviceName string `json:"device_name"`
	DeviceType WebhookDeviceEventsEventDeviceType `json:"device_type"`
	EvType WebhookDeviceEventsEventEvType `json:"ev_type"`
	// device mac
	Mac string `json:"mac"`
	OrgId string `json:"org_id"`
	// (optional) event reason
	Reason *string `json:"reason,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// site name
	SiteName *string `json:"site_name,omitempty"`
	// (optional) event description
	Text *string `json:"text,omitempty"`
	// time the event occurred e.g. 1565987313
	Timestamp int32 `json:"timestamp"`
	// event type
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _WebhookDeviceEventsEvent WebhookDeviceEventsEvent

// NewWebhookDeviceEventsEvent instantiates a new WebhookDeviceEventsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookDeviceEventsEvent(deviceName string, deviceType WebhookDeviceEventsEventDeviceType, evType WebhookDeviceEventsEventEvType, mac string, orgId string, timestamp int32, type_ string) *WebhookDeviceEventsEvent {
	this := WebhookDeviceEventsEvent{}
	this.DeviceName = deviceName
	this.DeviceType = deviceType
	this.EvType = evType
	this.Mac = mac
	this.OrgId = orgId
	this.Timestamp = timestamp
	this.Type = type_
	return &this
}

// NewWebhookDeviceEventsEventWithDefaults instantiates a new WebhookDeviceEventsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookDeviceEventsEventWithDefaults() *WebhookDeviceEventsEvent {
	this := WebhookDeviceEventsEvent{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *WebhookDeviceEventsEvent) SetAp(v string) {
	o.Ap = &v
}

// GetApName returns the ApName field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetApName() string {
	if o == nil || IsNil(o.ApName) {
		var ret string
		return ret
	}
	return *o.ApName
}

// GetApNameOk returns a tuple with the ApName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetApNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApName) {
		return nil, false
	}
	return o.ApName, true
}

// HasApName returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasApName() bool {
	if o != nil && !IsNil(o.ApName) {
		return true
	}

	return false
}

// SetApName gets a reference to the given string and assigns it to the ApName field.
func (o *WebhookDeviceEventsEvent) SetApName(v string) {
	o.ApName = &v
}

// GetAuditId returns the AuditId field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetAuditId() string {
	if o == nil || IsNil(o.AuditId) {
		var ret string
		return ret
	}
	return *o.AuditId
}

// GetAuditIdOk returns a tuple with the AuditId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetAuditIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuditId) {
		return nil, false
	}
	return o.AuditId, true
}

// HasAuditId returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasAuditId() bool {
	if o != nil && !IsNil(o.AuditId) {
		return true
	}

	return false
}

// SetAuditId gets a reference to the given string and assigns it to the AuditId field.
func (o *WebhookDeviceEventsEvent) SetAuditId(v string) {
	o.AuditId = &v
}

// GetDeviceName returns the DeviceName field value
func (o *WebhookDeviceEventsEvent) GetDeviceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetDeviceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceName, true
}

// SetDeviceName sets field value
func (o *WebhookDeviceEventsEvent) SetDeviceName(v string) {
	o.DeviceName = v
}

// GetDeviceType returns the DeviceType field value
func (o *WebhookDeviceEventsEvent) GetDeviceType() WebhookDeviceEventsEventDeviceType {
	if o == nil {
		var ret WebhookDeviceEventsEventDeviceType
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetDeviceTypeOk() (*WebhookDeviceEventsEventDeviceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *WebhookDeviceEventsEvent) SetDeviceType(v WebhookDeviceEventsEventDeviceType) {
	o.DeviceType = v
}

// GetEvType returns the EvType field value
func (o *WebhookDeviceEventsEvent) GetEvType() WebhookDeviceEventsEventEvType {
	if o == nil {
		var ret WebhookDeviceEventsEventEvType
		return ret
	}

	return o.EvType
}

// GetEvTypeOk returns a tuple with the EvType field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetEvTypeOk() (*WebhookDeviceEventsEventEvType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvType, true
}

// SetEvType sets field value
func (o *WebhookDeviceEventsEvent) SetEvType(v WebhookDeviceEventsEventEvType) {
	o.EvType = v
}

// GetMac returns the Mac field value
func (o *WebhookDeviceEventsEvent) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *WebhookDeviceEventsEvent) SetMac(v string) {
	o.Mac = v
}

// GetOrgId returns the OrgId field value
func (o *WebhookDeviceEventsEvent) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *WebhookDeviceEventsEvent) SetOrgId(v string) {
	o.OrgId = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *WebhookDeviceEventsEvent) SetReason(v string) {
	o.Reason = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *WebhookDeviceEventsEvent) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *WebhookDeviceEventsEvent) SetSiteName(v string) {
	o.SiteName = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *WebhookDeviceEventsEvent) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *WebhookDeviceEventsEvent) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *WebhookDeviceEventsEvent) SetText(v string) {
	o.Text = &v
}

// GetTimestamp returns the Timestamp field value
func (o *WebhookDeviceEventsEvent) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebhookDeviceEventsEvent) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *WebhookDeviceEventsEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookDeviceEventsEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookDeviceEventsEvent) SetType(v string) {
	o.Type = v
}

func (o WebhookDeviceEventsEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookDeviceEventsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	if !IsNil(o.ApName) {
		toSerialize["ap_name"] = o.ApName
	}
	if !IsNil(o.AuditId) {
		toSerialize["audit_id"] = o.AuditId
	}
	toSerialize["device_name"] = o.DeviceName
	toSerialize["device_type"] = o.DeviceType
	toSerialize["ev_type"] = o.EvType
	toSerialize["mac"] = o.Mac
	toSerialize["org_id"] = o.OrgId
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SiteName) {
		toSerialize["site_name"] = o.SiteName
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookDeviceEventsEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_name",
		"device_type",
		"ev_type",
		"mac",
		"org_id",
		"timestamp",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookDeviceEventsEvent := _WebhookDeviceEventsEvent{}

	err = json.Unmarshal(data, &varWebhookDeviceEventsEvent)

	if err != nil {
		return err
	}

	*o = WebhookDeviceEventsEvent(varWebhookDeviceEventsEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "ap_name")
		delete(additionalProperties, "audit_id")
		delete(additionalProperties, "device_name")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "ev_type")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "site_name")
		delete(additionalProperties, "text")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookDeviceEventsEvent struct {
	value *WebhookDeviceEventsEvent
	isSet bool
}

func (v NullableWebhookDeviceEventsEvent) Get() *WebhookDeviceEventsEvent {
	return v.value
}

func (v *NullableWebhookDeviceEventsEvent) Set(val *WebhookDeviceEventsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookDeviceEventsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookDeviceEventsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookDeviceEventsEvent(val *WebhookDeviceEventsEvent) *NullableWebhookDeviceEventsEvent {
	return &NullableWebhookDeviceEventsEvent{value: val, isSet: true}
}

func (v NullableWebhookDeviceEventsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookDeviceEventsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


