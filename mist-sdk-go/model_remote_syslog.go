/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RemoteSyslog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSyslog{}

// RemoteSyslog struct for RemoteSyslog
type RemoteSyslog struct {
	RemoteSyslogArchive *RemoteSyslogRemoteSyslogArchive `json:"remote_syslog_archive,omitempty"`
	RemoteSyslogConsole *RemoteSyslogRemoteSyslogConsole `json:"remote_syslog_console,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	RemoteSyslogFiles []SyslogFileConfig `json:"remote_syslog_files,omitempty"`
	// if source_address is configured, will use the vlan firstly otherwise use source_ip
	Network *string `json:"network,omitempty"`
	SendToAllServers *bool `json:"send_to_all_servers,omitempty"`
	RemoteSyslogServers []SyslogServer `json:"remote_syslog_servers,omitempty"`
	TimeFormat *string `json:"time_format,omitempty"`
	RemoteSyslogUsers []RemoteSyslogUser `json:"remote_syslog_users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RemoteSyslog RemoteSyslog

// NewRemoteSyslog instantiates a new RemoteSyslog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSyslog() *RemoteSyslog {
	this := RemoteSyslog{}
	var enabled bool = false
	this.Enabled = &enabled
	var sendToAllServers bool = false
	this.SendToAllServers = &sendToAllServers
	return &this
}

// NewRemoteSyslogWithDefaults instantiates a new RemoteSyslog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSyslogWithDefaults() *RemoteSyslog {
	this := RemoteSyslog{}
	var enabled bool = false
	this.Enabled = &enabled
	var sendToAllServers bool = false
	this.SendToAllServers = &sendToAllServers
	return &this
}

// GetRemoteSyslogArchive returns the RemoteSyslogArchive field value if set, zero value otherwise.
func (o *RemoteSyslog) GetRemoteSyslogArchive() RemoteSyslogRemoteSyslogArchive {
	if o == nil || IsNil(o.RemoteSyslogArchive) {
		var ret RemoteSyslogRemoteSyslogArchive
		return ret
	}
	return *o.RemoteSyslogArchive
}

// GetRemoteSyslogArchiveOk returns a tuple with the RemoteSyslogArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetRemoteSyslogArchiveOk() (*RemoteSyslogRemoteSyslogArchive, bool) {
	if o == nil || IsNil(o.RemoteSyslogArchive) {
		return nil, false
	}
	return o.RemoteSyslogArchive, true
}

// HasRemoteSyslogArchive returns a boolean if a field has been set.
func (o *RemoteSyslog) HasRemoteSyslogArchive() bool {
	if o != nil && !IsNil(o.RemoteSyslogArchive) {
		return true
	}

	return false
}

// SetRemoteSyslogArchive gets a reference to the given RemoteSyslogRemoteSyslogArchive and assigns it to the RemoteSyslogArchive field.
func (o *RemoteSyslog) SetRemoteSyslogArchive(v RemoteSyslogRemoteSyslogArchive) {
	o.RemoteSyslogArchive = &v
}

// GetRemoteSyslogConsole returns the RemoteSyslogConsole field value if set, zero value otherwise.
func (o *RemoteSyslog) GetRemoteSyslogConsole() RemoteSyslogRemoteSyslogConsole {
	if o == nil || IsNil(o.RemoteSyslogConsole) {
		var ret RemoteSyslogRemoteSyslogConsole
		return ret
	}
	return *o.RemoteSyslogConsole
}

// GetRemoteSyslogConsoleOk returns a tuple with the RemoteSyslogConsole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetRemoteSyslogConsoleOk() (*RemoteSyslogRemoteSyslogConsole, bool) {
	if o == nil || IsNil(o.RemoteSyslogConsole) {
		return nil, false
	}
	return o.RemoteSyslogConsole, true
}

// HasRemoteSyslogConsole returns a boolean if a field has been set.
func (o *RemoteSyslog) HasRemoteSyslogConsole() bool {
	if o != nil && !IsNil(o.RemoteSyslogConsole) {
		return true
	}

	return false
}

// SetRemoteSyslogConsole gets a reference to the given RemoteSyslogRemoteSyslogConsole and assigns it to the RemoteSyslogConsole field.
func (o *RemoteSyslog) SetRemoteSyslogConsole(v RemoteSyslogRemoteSyslogConsole) {
	o.RemoteSyslogConsole = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RemoteSyslog) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RemoteSyslog) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RemoteSyslog) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRemoteSyslogFiles returns the RemoteSyslogFiles field value if set, zero value otherwise.
func (o *RemoteSyslog) GetRemoteSyslogFiles() []SyslogFileConfig {
	if o == nil || IsNil(o.RemoteSyslogFiles) {
		var ret []SyslogFileConfig
		return ret
	}
	return o.RemoteSyslogFiles
}

// GetRemoteSyslogFilesOk returns a tuple with the RemoteSyslogFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetRemoteSyslogFilesOk() ([]SyslogFileConfig, bool) {
	if o == nil || IsNil(o.RemoteSyslogFiles) {
		return nil, false
	}
	return o.RemoteSyslogFiles, true
}

// HasRemoteSyslogFiles returns a boolean if a field has been set.
func (o *RemoteSyslog) HasRemoteSyslogFiles() bool {
	if o != nil && !IsNil(o.RemoteSyslogFiles) {
		return true
	}

	return false
}

// SetRemoteSyslogFiles gets a reference to the given []SyslogFileConfig and assigns it to the RemoteSyslogFiles field.
func (o *RemoteSyslog) SetRemoteSyslogFiles(v []SyslogFileConfig) {
	o.RemoteSyslogFiles = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RemoteSyslog) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RemoteSyslog) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RemoteSyslog) SetNetwork(v string) {
	o.Network = &v
}

// GetSendToAllServers returns the SendToAllServers field value if set, zero value otherwise.
func (o *RemoteSyslog) GetSendToAllServers() bool {
	if o == nil || IsNil(o.SendToAllServers) {
		var ret bool
		return ret
	}
	return *o.SendToAllServers
}

// GetSendToAllServersOk returns a tuple with the SendToAllServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetSendToAllServersOk() (*bool, bool) {
	if o == nil || IsNil(o.SendToAllServers) {
		return nil, false
	}
	return o.SendToAllServers, true
}

// HasSendToAllServers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasSendToAllServers() bool {
	if o != nil && !IsNil(o.SendToAllServers) {
		return true
	}

	return false
}

// SetSendToAllServers gets a reference to the given bool and assigns it to the SendToAllServers field.
func (o *RemoteSyslog) SetSendToAllServers(v bool) {
	o.SendToAllServers = &v
}

// GetRemoteSyslogServers returns the RemoteSyslogServers field value if set, zero value otherwise.
func (o *RemoteSyslog) GetRemoteSyslogServers() []SyslogServer {
	if o == nil || IsNil(o.RemoteSyslogServers) {
		var ret []SyslogServer
		return ret
	}
	return o.RemoteSyslogServers
}

// GetRemoteSyslogServersOk returns a tuple with the RemoteSyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetRemoteSyslogServersOk() ([]SyslogServer, bool) {
	if o == nil || IsNil(o.RemoteSyslogServers) {
		return nil, false
	}
	return o.RemoteSyslogServers, true
}

// HasRemoteSyslogServers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasRemoteSyslogServers() bool {
	if o != nil && !IsNil(o.RemoteSyslogServers) {
		return true
	}

	return false
}

// SetRemoteSyslogServers gets a reference to the given []SyslogServer and assigns it to the RemoteSyslogServers field.
func (o *RemoteSyslog) SetRemoteSyslogServers(v []SyslogServer) {
	o.RemoteSyslogServers = v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *RemoteSyslog) GetTimeFormat() string {
	if o == nil || IsNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *RemoteSyslog) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *RemoteSyslog) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

// GetRemoteSyslogUsers returns the RemoteSyslogUsers field value if set, zero value otherwise.
func (o *RemoteSyslog) GetRemoteSyslogUsers() []RemoteSyslogUser {
	if o == nil || IsNil(o.RemoteSyslogUsers) {
		var ret []RemoteSyslogUser
		return ret
	}
	return o.RemoteSyslogUsers
}

// GetRemoteSyslogUsersOk returns a tuple with the RemoteSyslogUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetRemoteSyslogUsersOk() ([]RemoteSyslogUser, bool) {
	if o == nil || IsNil(o.RemoteSyslogUsers) {
		return nil, false
	}
	return o.RemoteSyslogUsers, true
}

// HasRemoteSyslogUsers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasRemoteSyslogUsers() bool {
	if o != nil && !IsNil(o.RemoteSyslogUsers) {
		return true
	}

	return false
}

// SetRemoteSyslogUsers gets a reference to the given []RemoteSyslogUser and assigns it to the RemoteSyslogUsers field.
func (o *RemoteSyslog) SetRemoteSyslogUsers(v []RemoteSyslogUser) {
	o.RemoteSyslogUsers = v
}

func (o RemoteSyslog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSyslog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemoteSyslogArchive) {
		toSerialize["remote_syslog_archive"] = o.RemoteSyslogArchive
	}
	if !IsNil(o.RemoteSyslogConsole) {
		toSerialize["remote_syslog_console"] = o.RemoteSyslogConsole
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RemoteSyslogFiles) {
		toSerialize["remote_syslog_files"] = o.RemoteSyslogFiles
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.SendToAllServers) {
		toSerialize["send_to_all_servers"] = o.SendToAllServers
	}
	if !IsNil(o.RemoteSyslogServers) {
		toSerialize["remote_syslog_servers"] = o.RemoteSyslogServers
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["time_format"] = o.TimeFormat
	}
	if !IsNil(o.RemoteSyslogUsers) {
		toSerialize["remote_syslog_users"] = o.RemoteSyslogUsers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteSyslog) UnmarshalJSON(data []byte) (err error) {
	varRemoteSyslog := _RemoteSyslog{}

	err = json.Unmarshal(data, &varRemoteSyslog)

	if err != nil {
		return err
	}

	*o = RemoteSyslog(varRemoteSyslog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "remote_syslog_archive")
		delete(additionalProperties, "remote_syslog_console")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "remote_syslog_files")
		delete(additionalProperties, "network")
		delete(additionalProperties, "send_to_all_servers")
		delete(additionalProperties, "remote_syslog_servers")
		delete(additionalProperties, "time_format")
		delete(additionalProperties, "remote_syslog_users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteSyslog struct {
	value *RemoteSyslog
	isSet bool
}

func (v NullableRemoteSyslog) Get() *RemoteSyslog {
	return v.value
}

func (v *NullableRemoteSyslog) Set(val *RemoteSyslog) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslog) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslog(val *RemoteSyslog) *NullableRemoteSyslog {
	return &NullableRemoteSyslog{value: val, isSet: true}
}

func (v NullableRemoteSyslog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


