/*
Mist API

> Version: **2406.1.7** > > Date: **June 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.7
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WebhookNacAccountingEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookNacAccountingEvent{}

// WebhookNacAccountingEvent struct for WebhookNacAccountingEvent
type WebhookNacAccountingEvent struct {
	// mac address of the AP the client roamed or disconnected from
	Ap *string `json:"ap,omitempty"`
	// radius authentication type
	AuthType *string `json:"auth_type,omitempty"`
	// it’s the MAC physical address of the access point
	Bssid *string `json:"bssid,omitempty"`
	// IP Address of client
	ClientIp *string `json:"client_ip,omitempty"`
	// client type E.g. “wired”, “wireless”, “vty”
	ClientType *string `json:"client_type,omitempty"`
	// the client’s mac
	Mac *string `json:"mac,omitempty"`
	// NAS Device vendor name E.g. “Juniper”, “Cisco”
	NasVendor *string `json:"nas_vendor,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// number of packets received
	RxPkts *int32 `json:"rx_pkts,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// ESSID
	Ssid *string `json:"ssid,omitempty"`
	// sampling time (in epoch)
	Timestamp *float32 `json:"timestamp,omitempty"`
	// number of packets sent
	TxPkts *int32 `json:"tx_pkts,omitempty"`
	// type of event. E.g. “ACCOUNTING_START”, “ACCOUNTING_UPDATE”, “ACCOUNTING_STOP”
	Type *string `json:"type,omitempty"`
	// username authenticated with
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookNacAccountingEvent WebhookNacAccountingEvent

// NewWebhookNacAccountingEvent instantiates a new WebhookNacAccountingEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookNacAccountingEvent() *WebhookNacAccountingEvent {
	this := WebhookNacAccountingEvent{}
	return &this
}

// NewWebhookNacAccountingEventWithDefaults instantiates a new WebhookNacAccountingEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookNacAccountingEventWithDefaults() *WebhookNacAccountingEvent {
	this := WebhookNacAccountingEvent{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *WebhookNacAccountingEvent) SetAp(v string) {
	o.Ap = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *WebhookNacAccountingEvent) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBssid returns the Bssid field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetBssid() string {
	if o == nil || IsNil(o.Bssid) {
		var ret string
		return ret
	}
	return *o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetBssidOk() (*string, bool) {
	if o == nil || IsNil(o.Bssid) {
		return nil, false
	}
	return o.Bssid, true
}

// HasBssid returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasBssid() bool {
	if o != nil && !IsNil(o.Bssid) {
		return true
	}

	return false
}

// SetBssid gets a reference to the given string and assigns it to the Bssid field.
func (o *WebhookNacAccountingEvent) SetBssid(v string) {
	o.Bssid = &v
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetClientIp() string {
	if o == nil || IsNil(o.ClientIp) {
		var ret string
		return ret
	}
	return *o.ClientIp
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetClientIpOk() (*string, bool) {
	if o == nil || IsNil(o.ClientIp) {
		return nil, false
	}
	return o.ClientIp, true
}

// HasClientIp returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasClientIp() bool {
	if o != nil && !IsNil(o.ClientIp) {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given string and assigns it to the ClientIp field.
func (o *WebhookNacAccountingEvent) SetClientIp(v string) {
	o.ClientIp = &v
}

// GetClientType returns the ClientType field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetClientType() string {
	if o == nil || IsNil(o.ClientType) {
		var ret string
		return ret
	}
	return *o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetClientTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ClientType) {
		return nil, false
	}
	return o.ClientType, true
}

// HasClientType returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasClientType() bool {
	if o != nil && !IsNil(o.ClientType) {
		return true
	}

	return false
}

// SetClientType gets a reference to the given string and assigns it to the ClientType field.
func (o *WebhookNacAccountingEvent) SetClientType(v string) {
	o.ClientType = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *WebhookNacAccountingEvent) SetMac(v string) {
	o.Mac = &v
}

// GetNasVendor returns the NasVendor field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetNasVendor() string {
	if o == nil || IsNil(o.NasVendor) {
		var ret string
		return ret
	}
	return *o.NasVendor
}

// GetNasVendorOk returns a tuple with the NasVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetNasVendorOk() (*string, bool) {
	if o == nil || IsNil(o.NasVendor) {
		return nil, false
	}
	return o.NasVendor, true
}

// HasNasVendor returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasNasVendor() bool {
	if o != nil && !IsNil(o.NasVendor) {
		return true
	}

	return false
}

// SetNasVendor gets a reference to the given string and assigns it to the NasVendor field.
func (o *WebhookNacAccountingEvent) SetNasVendor(v string) {
	o.NasVendor = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *WebhookNacAccountingEvent) SetOrgId(v string) {
	o.OrgId = &v
}

// GetRxPkts returns the RxPkts field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetRxPkts() int32 {
	if o == nil || IsNil(o.RxPkts) {
		var ret int32
		return ret
	}
	return *o.RxPkts
}

// GetRxPktsOk returns a tuple with the RxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetRxPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxPkts) {
		return nil, false
	}
	return o.RxPkts, true
}

// HasRxPkts returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasRxPkts() bool {
	if o != nil && !IsNil(o.RxPkts) {
		return true
	}

	return false
}

// SetRxPkts gets a reference to the given int32 and assigns it to the RxPkts field.
func (o *WebhookNacAccountingEvent) SetRxPkts(v int32) {
	o.RxPkts = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *WebhookNacAccountingEvent) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetSsid() string {
	if o == nil || IsNil(o.Ssid) {
		var ret string
		return ret
	}
	return *o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetSsidOk() (*string, bool) {
	if o == nil || IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasSsid() bool {
	if o != nil && !IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given string and assigns it to the Ssid field.
func (o *WebhookNacAccountingEvent) SetSsid(v string) {
	o.Ssid = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetTimestamp() float32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret float32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given float32 and assigns it to the Timestamp field.
func (o *WebhookNacAccountingEvent) SetTimestamp(v float32) {
	o.Timestamp = &v
}

// GetTxPkts returns the TxPkts field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetTxPkts() int32 {
	if o == nil || IsNil(o.TxPkts) {
		var ret int32
		return ret
	}
	return *o.TxPkts
}

// GetTxPktsOk returns a tuple with the TxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetTxPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxPkts) {
		return nil, false
	}
	return o.TxPkts, true
}

// HasTxPkts returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasTxPkts() bool {
	if o != nil && !IsNil(o.TxPkts) {
		return true
	}

	return false
}

// SetTxPkts gets a reference to the given int32 and assigns it to the TxPkts field.
func (o *WebhookNacAccountingEvent) SetTxPkts(v int32) {
	o.TxPkts = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebhookNacAccountingEvent) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *WebhookNacAccountingEvent) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacAccountingEvent) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *WebhookNacAccountingEvent) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *WebhookNacAccountingEvent) SetUsername(v string) {
	o.Username = &v
}

func (o WebhookNacAccountingEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookNacAccountingEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Bssid) {
		toSerialize["bssid"] = o.Bssid
	}
	if !IsNil(o.ClientIp) {
		toSerialize["client_ip"] = o.ClientIp
	}
	if !IsNil(o.ClientType) {
		toSerialize["client_type"] = o.ClientType
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.NasVendor) {
		toSerialize["nas_vendor"] = o.NasVendor
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.RxPkts) {
		toSerialize["rx_pkts"] = o.RxPkts
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TxPkts) {
		toSerialize["tx_pkts"] = o.TxPkts
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookNacAccountingEvent) UnmarshalJSON(data []byte) (err error) {
	varWebhookNacAccountingEvent := _WebhookNacAccountingEvent{}

	err = json.Unmarshal(data, &varWebhookNacAccountingEvent)

	if err != nil {
		return err
	}

	*o = WebhookNacAccountingEvent(varWebhookNacAccountingEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "auth_type")
		delete(additionalProperties, "bssid")
		delete(additionalProperties, "client_ip")
		delete(additionalProperties, "client_type")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "nas_vendor")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "rx_pkts")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "tx_pkts")
		delete(additionalProperties, "type")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookNacAccountingEvent struct {
	value *WebhookNacAccountingEvent
	isSet bool
}

func (v NullableWebhookNacAccountingEvent) Get() *WebhookNacAccountingEvent {
	return v.value
}

func (v *NullableWebhookNacAccountingEvent) Set(val *WebhookNacAccountingEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookNacAccountingEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookNacAccountingEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookNacAccountingEvent(val *WebhookNacAccountingEvent) *NullableWebhookNacAccountingEvent {
	return &NullableWebhookNacAccountingEvent{value: val, isSet: true}
}

func (v NullableWebhookNacAccountingEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookNacAccountingEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


