/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookAssetRawEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookAssetRawEvent{}

// WebhookAssetRawEvent struct for WebhookAssetRawEvent
type WebhookAssetRawEvent struct {
	// asset id
	AssetId string `json:"asset_id"`
	// antenna index, from 1-8, clock-wise starting from the LED
	Beam int32 `json:"beam"`
	// device where the asset reading is from
	DeviceId string `json:"device_id"`
	// iBeacon major
	IbeaconMajor *int32 `json:"ibeacon_major,omitempty"`
	// iBeacon minor
	IbeaconMinor *int32 `json:"ibeacon_minor,omitempty"`
	// iBeacon UUID
	IbeaconUuid *string `json:"ibeacon_uuid,omitempty"`
	// MAC of the beacon
	Mac string `json:"mac"`
	// map id
	MapId string `json:"map_id"`
	// optional, BLE manufacturing company ID
	MfgCompanyId float32 `json:"mfg_company_id"`
	// optional, BLE manufacturing data in hex byte-string format (ie: “112233AABBCC”)
	MfgData string `json:"mfg_data"`
	// signal strength
	Rssi float32 `json:"rssi"`
	// optional, data from service data
	ServiceDataData *string `json:"service_data_data,omitempty"`
	// optional, last data transmit time from service data
	ServiceDataLastRxTime *int32 `json:"service_data_last_rx_time,omitempty"`
	// optional, data transmit count from service data
	ServiceDataRxCnt *int32 `json:"service_data_rx_cnt,omitempty"`
	// optional, UUID from service data
	ServiceDataUuid *string `json:"service_data_uuid,omitempty"`
	// list of service data packets heard from the asset/ beacon
	ServicePackets []ServicePacket `json:"service_packets,omitempty"`
	SiteId string `json:"site_id"`
	Timestamp float32 `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _WebhookAssetRawEvent WebhookAssetRawEvent

// NewWebhookAssetRawEvent instantiates a new WebhookAssetRawEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookAssetRawEvent(assetId string, beam int32, deviceId string, mac string, mapId string, mfgCompanyId float32, mfgData string, rssi float32, siteId string, timestamp float32) *WebhookAssetRawEvent {
	this := WebhookAssetRawEvent{}
	this.AssetId = assetId
	this.Beam = beam
	this.DeviceId = deviceId
	this.Mac = mac
	this.MapId = mapId
	this.MfgCompanyId = mfgCompanyId
	this.MfgData = mfgData
	this.Rssi = rssi
	this.SiteId = siteId
	this.Timestamp = timestamp
	return &this
}

// NewWebhookAssetRawEventWithDefaults instantiates a new WebhookAssetRawEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookAssetRawEventWithDefaults() *WebhookAssetRawEvent {
	this := WebhookAssetRawEvent{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *WebhookAssetRawEvent) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *WebhookAssetRawEvent) SetAssetId(v string) {
	o.AssetId = v
}

// GetBeam returns the Beam field value
func (o *WebhookAssetRawEvent) GetBeam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Beam
}

// GetBeamOk returns a tuple with the Beam field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetBeamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Beam, true
}

// SetBeam sets field value
func (o *WebhookAssetRawEvent) SetBeam(v int32) {
	o.Beam = v
}

// GetDeviceId returns the DeviceId field value
func (o *WebhookAssetRawEvent) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *WebhookAssetRawEvent) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetIbeaconMajor returns the IbeaconMajor field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetIbeaconMajor() int32 {
	if o == nil || IsNil(o.IbeaconMajor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMajor
}

// GetIbeaconMajorOk returns a tuple with the IbeaconMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetIbeaconMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMajor) {
		return nil, false
	}
	return o.IbeaconMajor, true
}

// HasIbeaconMajor returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasIbeaconMajor() bool {
	if o != nil && !IsNil(o.IbeaconMajor) {
		return true
	}

	return false
}

// SetIbeaconMajor gets a reference to the given int32 and assigns it to the IbeaconMajor field.
func (o *WebhookAssetRawEvent) SetIbeaconMajor(v int32) {
	o.IbeaconMajor = &v
}

// GetIbeaconMinor returns the IbeaconMinor field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetIbeaconMinor() int32 {
	if o == nil || IsNil(o.IbeaconMinor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMinor
}

// GetIbeaconMinorOk returns a tuple with the IbeaconMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetIbeaconMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMinor) {
		return nil, false
	}
	return o.IbeaconMinor, true
}

// HasIbeaconMinor returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasIbeaconMinor() bool {
	if o != nil && !IsNil(o.IbeaconMinor) {
		return true
	}

	return false
}

// SetIbeaconMinor gets a reference to the given int32 and assigns it to the IbeaconMinor field.
func (o *WebhookAssetRawEvent) SetIbeaconMinor(v int32) {
	o.IbeaconMinor = &v
}

// GetIbeaconUuid returns the IbeaconUuid field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetIbeaconUuid() string {
	if o == nil || IsNil(o.IbeaconUuid) {
		var ret string
		return ret
	}
	return *o.IbeaconUuid
}

// GetIbeaconUuidOk returns a tuple with the IbeaconUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetIbeaconUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IbeaconUuid) {
		return nil, false
	}
	return o.IbeaconUuid, true
}

// HasIbeaconUuid returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasIbeaconUuid() bool {
	if o != nil && !IsNil(o.IbeaconUuid) {
		return true
	}

	return false
}

// SetIbeaconUuid gets a reference to the given string and assigns it to the IbeaconUuid field.
func (o *WebhookAssetRawEvent) SetIbeaconUuid(v string) {
	o.IbeaconUuid = &v
}

// GetMac returns the Mac field value
func (o *WebhookAssetRawEvent) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *WebhookAssetRawEvent) SetMac(v string) {
	o.Mac = v
}

// GetMapId returns the MapId field value
func (o *WebhookAssetRawEvent) GetMapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *WebhookAssetRawEvent) SetMapId(v string) {
	o.MapId = v
}

// GetMfgCompanyId returns the MfgCompanyId field value
func (o *WebhookAssetRawEvent) GetMfgCompanyId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MfgCompanyId
}

// GetMfgCompanyIdOk returns a tuple with the MfgCompanyId field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetMfgCompanyIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfgCompanyId, true
}

// SetMfgCompanyId sets field value
func (o *WebhookAssetRawEvent) SetMfgCompanyId(v float32) {
	o.MfgCompanyId = v
}

// GetMfgData returns the MfgData field value
func (o *WebhookAssetRawEvent) GetMfgData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MfgData
}

// GetMfgDataOk returns a tuple with the MfgData field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetMfgDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfgData, true
}

// SetMfgData sets field value
func (o *WebhookAssetRawEvent) SetMfgData(v string) {
	o.MfgData = v
}

// GetRssi returns the Rssi field value
func (o *WebhookAssetRawEvent) GetRssi() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetRssiOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rssi, true
}

// SetRssi sets field value
func (o *WebhookAssetRawEvent) SetRssi(v float32) {
	o.Rssi = v
}

// GetServiceDataData returns the ServiceDataData field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetServiceDataData() string {
	if o == nil || IsNil(o.ServiceDataData) {
		var ret string
		return ret
	}
	return *o.ServiceDataData
}

// GetServiceDataDataOk returns a tuple with the ServiceDataData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetServiceDataDataOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceDataData) {
		return nil, false
	}
	return o.ServiceDataData, true
}

// HasServiceDataData returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasServiceDataData() bool {
	if o != nil && !IsNil(o.ServiceDataData) {
		return true
	}

	return false
}

// SetServiceDataData gets a reference to the given string and assigns it to the ServiceDataData field.
func (o *WebhookAssetRawEvent) SetServiceDataData(v string) {
	o.ServiceDataData = &v
}

// GetServiceDataLastRxTime returns the ServiceDataLastRxTime field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetServiceDataLastRxTime() int32 {
	if o == nil || IsNil(o.ServiceDataLastRxTime) {
		var ret int32
		return ret
	}
	return *o.ServiceDataLastRxTime
}

// GetServiceDataLastRxTimeOk returns a tuple with the ServiceDataLastRxTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetServiceDataLastRxTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceDataLastRxTime) {
		return nil, false
	}
	return o.ServiceDataLastRxTime, true
}

// HasServiceDataLastRxTime returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasServiceDataLastRxTime() bool {
	if o != nil && !IsNil(o.ServiceDataLastRxTime) {
		return true
	}

	return false
}

// SetServiceDataLastRxTime gets a reference to the given int32 and assigns it to the ServiceDataLastRxTime field.
func (o *WebhookAssetRawEvent) SetServiceDataLastRxTime(v int32) {
	o.ServiceDataLastRxTime = &v
}

// GetServiceDataRxCnt returns the ServiceDataRxCnt field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetServiceDataRxCnt() int32 {
	if o == nil || IsNil(o.ServiceDataRxCnt) {
		var ret int32
		return ret
	}
	return *o.ServiceDataRxCnt
}

// GetServiceDataRxCntOk returns a tuple with the ServiceDataRxCnt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetServiceDataRxCntOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceDataRxCnt) {
		return nil, false
	}
	return o.ServiceDataRxCnt, true
}

// HasServiceDataRxCnt returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasServiceDataRxCnt() bool {
	if o != nil && !IsNil(o.ServiceDataRxCnt) {
		return true
	}

	return false
}

// SetServiceDataRxCnt gets a reference to the given int32 and assigns it to the ServiceDataRxCnt field.
func (o *WebhookAssetRawEvent) SetServiceDataRxCnt(v int32) {
	o.ServiceDataRxCnt = &v
}

// GetServiceDataUuid returns the ServiceDataUuid field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetServiceDataUuid() string {
	if o == nil || IsNil(o.ServiceDataUuid) {
		var ret string
		return ret
	}
	return *o.ServiceDataUuid
}

// GetServiceDataUuidOk returns a tuple with the ServiceDataUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetServiceDataUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceDataUuid) {
		return nil, false
	}
	return o.ServiceDataUuid, true
}

// HasServiceDataUuid returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasServiceDataUuid() bool {
	if o != nil && !IsNil(o.ServiceDataUuid) {
		return true
	}

	return false
}

// SetServiceDataUuid gets a reference to the given string and assigns it to the ServiceDataUuid field.
func (o *WebhookAssetRawEvent) SetServiceDataUuid(v string) {
	o.ServiceDataUuid = &v
}

// GetServicePackets returns the ServicePackets field value if set, zero value otherwise.
func (o *WebhookAssetRawEvent) GetServicePackets() []ServicePacket {
	if o == nil || IsNil(o.ServicePackets) {
		var ret []ServicePacket
		return ret
	}
	return o.ServicePackets
}

// GetServicePacketsOk returns a tuple with the ServicePackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetServicePacketsOk() ([]ServicePacket, bool) {
	if o == nil || IsNil(o.ServicePackets) {
		return nil, false
	}
	return o.ServicePackets, true
}

// HasServicePackets returns a boolean if a field has been set.
func (o *WebhookAssetRawEvent) HasServicePackets() bool {
	if o != nil && !IsNil(o.ServicePackets) {
		return true
	}

	return false
}

// SetServicePackets gets a reference to the given []ServicePacket and assigns it to the ServicePackets field.
func (o *WebhookAssetRawEvent) SetServicePackets(v []ServicePacket) {
	o.ServicePackets = v
}

// GetSiteId returns the SiteId field value
func (o *WebhookAssetRawEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookAssetRawEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetTimestamp returns the Timestamp field value
func (o *WebhookAssetRawEvent) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookAssetRawEvent) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebhookAssetRawEvent) SetTimestamp(v float32) {
	o.Timestamp = v
}

func (o WebhookAssetRawEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookAssetRawEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_id"] = o.AssetId
	toSerialize["beam"] = o.Beam
	toSerialize["device_id"] = o.DeviceId
	if !IsNil(o.IbeaconMajor) {
		toSerialize["ibeacon_major"] = o.IbeaconMajor
	}
	if !IsNil(o.IbeaconMinor) {
		toSerialize["ibeacon_minor"] = o.IbeaconMinor
	}
	if !IsNil(o.IbeaconUuid) {
		toSerialize["ibeacon_uuid"] = o.IbeaconUuid
	}
	toSerialize["mac"] = o.Mac
	toSerialize["map_id"] = o.MapId
	toSerialize["mfg_company_id"] = o.MfgCompanyId
	toSerialize["mfg_data"] = o.MfgData
	toSerialize["rssi"] = o.Rssi
	if !IsNil(o.ServiceDataData) {
		toSerialize["service_data_data"] = o.ServiceDataData
	}
	if !IsNil(o.ServiceDataLastRxTime) {
		toSerialize["service_data_last_rx_time"] = o.ServiceDataLastRxTime
	}
	if !IsNil(o.ServiceDataRxCnt) {
		toSerialize["service_data_rx_cnt"] = o.ServiceDataRxCnt
	}
	if !IsNil(o.ServiceDataUuid) {
		toSerialize["service_data_uuid"] = o.ServiceDataUuid
	}
	if !IsNil(o.ServicePackets) {
		toSerialize["service_packets"] = o.ServicePackets
	}
	toSerialize["site_id"] = o.SiteId
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookAssetRawEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"beam",
		"device_id",
		"mac",
		"map_id",
		"mfg_company_id",
		"mfg_data",
		"rssi",
		"site_id",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookAssetRawEvent := _WebhookAssetRawEvent{}

	err = json.Unmarshal(data, &varWebhookAssetRawEvent)

	if err != nil {
		return err
	}

	*o = WebhookAssetRawEvent(varWebhookAssetRawEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_id")
		delete(additionalProperties, "beam")
		delete(additionalProperties, "device_id")
		delete(additionalProperties, "ibeacon_major")
		delete(additionalProperties, "ibeacon_minor")
		delete(additionalProperties, "ibeacon_uuid")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "mfg_company_id")
		delete(additionalProperties, "mfg_data")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "service_data_data")
		delete(additionalProperties, "service_data_last_rx_time")
		delete(additionalProperties, "service_data_rx_cnt")
		delete(additionalProperties, "service_data_uuid")
		delete(additionalProperties, "service_packets")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookAssetRawEvent struct {
	value *WebhookAssetRawEvent
	isSet bool
}

func (v NullableWebhookAssetRawEvent) Get() *WebhookAssetRawEvent {
	return v.value
}

func (v *NullableWebhookAssetRawEvent) Set(val *WebhookAssetRawEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookAssetRawEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookAssetRawEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookAssetRawEvent(val *WebhookAssetRawEvent) *NullableWebhookAssetRawEvent {
	return &NullableWebhookAssetRawEvent{value: val, isSet: true}
}

func (v NullableWebhookAssetRawEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookAssetRawEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


