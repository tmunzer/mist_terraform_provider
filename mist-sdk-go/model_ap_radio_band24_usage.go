/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// ApRadioBand24Usage if `band_24_usage`==`5`, by default, band_5 properties is used, if specific channel/bandwidth/power/... is desired, use the \"band_5_on_24_radio\"
type ApRadioBand24Usage string

// List of ap_radio_band24_usage
const (
	APRADIOBAND24USAGE_EMPTY ApRadioBand24Usage = ""
	APRADIOBAND24USAGE__24 ApRadioBand24Usage = "24"
	APRADIOBAND24USAGE__5 ApRadioBand24Usage = "5"
	APRADIOBAND24USAGE_AUTO ApRadioBand24Usage = "auto"
)

// All allowed values of ApRadioBand24Usage enum
var AllowedApRadioBand24UsageEnumValues = []ApRadioBand24Usage{
	"",
	"24",
	"5",
	"auto",
}

func (v *ApRadioBand24Usage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApRadioBand24Usage(value)
	for _, existing := range AllowedApRadioBand24UsageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApRadioBand24Usage", value)
}

// NewApRadioBand24UsageFromValue returns a pointer to a valid ApRadioBand24Usage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApRadioBand24UsageFromValue(v string) (*ApRadioBand24Usage, error) {
	ev := ApRadioBand24Usage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApRadioBand24Usage: valid values are %v", v, AllowedApRadioBand24UsageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApRadioBand24Usage) IsValid() bool {
	for _, existing := range AllowedApRadioBand24UsageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ap_radio_band24_usage value
func (v ApRadioBand24Usage) Ptr() *ApRadioBand24Usage {
	return &v
}

type NullableApRadioBand24Usage struct {
	value *ApRadioBand24Usage
	isSet bool
}

func (v NullableApRadioBand24Usage) Get() *ApRadioBand24Usage {
	return v.value
}

func (v *NullableApRadioBand24Usage) Set(val *ApRadioBand24Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableApRadioBand24Usage) IsSet() bool {
	return v.isSet
}

func (v *NullableApRadioBand24Usage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApRadioBand24Usage(val *ApRadioBand24Usage) *NullableApRadioBand24Usage {
	return &NullableApRadioBand24Usage{value: val, isSet: true}
}

func (v NullableApRadioBand24Usage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApRadioBand24Usage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

