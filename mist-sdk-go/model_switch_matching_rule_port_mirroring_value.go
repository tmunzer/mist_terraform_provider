/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SwitchMatchingRulePortMirroringValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchMatchingRulePortMirroringValue{}

// SwitchMatchingRulePortMirroringValue property key is the port mirroring rule name
type SwitchMatchingRulePortMirroringValue struct {
	InputNetworksIngress []string `json:"input_networks_ingress,omitempty"`
	InputPortIdsEgress []string `json:"input_port_ids_egress,omitempty"`
	InputPortIdsIngress []string `json:"input_port_ids_ingress,omitempty"`
	OutputPortId *string `json:"output_port_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchMatchingRulePortMirroringValue SwitchMatchingRulePortMirroringValue

// NewSwitchMatchingRulePortMirroringValue instantiates a new SwitchMatchingRulePortMirroringValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchMatchingRulePortMirroringValue() *SwitchMatchingRulePortMirroringValue {
	this := SwitchMatchingRulePortMirroringValue{}
	return &this
}

// NewSwitchMatchingRulePortMirroringValueWithDefaults instantiates a new SwitchMatchingRulePortMirroringValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchMatchingRulePortMirroringValueWithDefaults() *SwitchMatchingRulePortMirroringValue {
	this := SwitchMatchingRulePortMirroringValue{}
	return &this
}

// GetInputNetworksIngress returns the InputNetworksIngress field value if set, zero value otherwise.
func (o *SwitchMatchingRulePortMirroringValue) GetInputNetworksIngress() []string {
	if o == nil || IsNil(o.InputNetworksIngress) {
		var ret []string
		return ret
	}
	return o.InputNetworksIngress
}

// GetInputNetworksIngressOk returns a tuple with the InputNetworksIngress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMatchingRulePortMirroringValue) GetInputNetworksIngressOk() ([]string, bool) {
	if o == nil || IsNil(o.InputNetworksIngress) {
		return nil, false
	}
	return o.InputNetworksIngress, true
}

// HasInputNetworksIngress returns a boolean if a field has been set.
func (o *SwitchMatchingRulePortMirroringValue) HasInputNetworksIngress() bool {
	if o != nil && !IsNil(o.InputNetworksIngress) {
		return true
	}

	return false
}

// SetInputNetworksIngress gets a reference to the given []string and assigns it to the InputNetworksIngress field.
func (o *SwitchMatchingRulePortMirroringValue) SetInputNetworksIngress(v []string) {
	o.InputNetworksIngress = v
}

// GetInputPortIdsEgress returns the InputPortIdsEgress field value if set, zero value otherwise.
func (o *SwitchMatchingRulePortMirroringValue) GetInputPortIdsEgress() []string {
	if o == nil || IsNil(o.InputPortIdsEgress) {
		var ret []string
		return ret
	}
	return o.InputPortIdsEgress
}

// GetInputPortIdsEgressOk returns a tuple with the InputPortIdsEgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMatchingRulePortMirroringValue) GetInputPortIdsEgressOk() ([]string, bool) {
	if o == nil || IsNil(o.InputPortIdsEgress) {
		return nil, false
	}
	return o.InputPortIdsEgress, true
}

// HasInputPortIdsEgress returns a boolean if a field has been set.
func (o *SwitchMatchingRulePortMirroringValue) HasInputPortIdsEgress() bool {
	if o != nil && !IsNil(o.InputPortIdsEgress) {
		return true
	}

	return false
}

// SetInputPortIdsEgress gets a reference to the given []string and assigns it to the InputPortIdsEgress field.
func (o *SwitchMatchingRulePortMirroringValue) SetInputPortIdsEgress(v []string) {
	o.InputPortIdsEgress = v
}

// GetInputPortIdsIngress returns the InputPortIdsIngress field value if set, zero value otherwise.
func (o *SwitchMatchingRulePortMirroringValue) GetInputPortIdsIngress() []string {
	if o == nil || IsNil(o.InputPortIdsIngress) {
		var ret []string
		return ret
	}
	return o.InputPortIdsIngress
}

// GetInputPortIdsIngressOk returns a tuple with the InputPortIdsIngress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMatchingRulePortMirroringValue) GetInputPortIdsIngressOk() ([]string, bool) {
	if o == nil || IsNil(o.InputPortIdsIngress) {
		return nil, false
	}
	return o.InputPortIdsIngress, true
}

// HasInputPortIdsIngress returns a boolean if a field has been set.
func (o *SwitchMatchingRulePortMirroringValue) HasInputPortIdsIngress() bool {
	if o != nil && !IsNil(o.InputPortIdsIngress) {
		return true
	}

	return false
}

// SetInputPortIdsIngress gets a reference to the given []string and assigns it to the InputPortIdsIngress field.
func (o *SwitchMatchingRulePortMirroringValue) SetInputPortIdsIngress(v []string) {
	o.InputPortIdsIngress = v
}

// GetOutputPortId returns the OutputPortId field value if set, zero value otherwise.
func (o *SwitchMatchingRulePortMirroringValue) GetOutputPortId() string {
	if o == nil || IsNil(o.OutputPortId) {
		var ret string
		return ret
	}
	return *o.OutputPortId
}

// GetOutputPortIdOk returns a tuple with the OutputPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMatchingRulePortMirroringValue) GetOutputPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.OutputPortId) {
		return nil, false
	}
	return o.OutputPortId, true
}

// HasOutputPortId returns a boolean if a field has been set.
func (o *SwitchMatchingRulePortMirroringValue) HasOutputPortId() bool {
	if o != nil && !IsNil(o.OutputPortId) {
		return true
	}

	return false
}

// SetOutputPortId gets a reference to the given string and assigns it to the OutputPortId field.
func (o *SwitchMatchingRulePortMirroringValue) SetOutputPortId(v string) {
	o.OutputPortId = &v
}

func (o SwitchMatchingRulePortMirroringValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchMatchingRulePortMirroringValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputNetworksIngress) {
		toSerialize["input_networks_ingress"] = o.InputNetworksIngress
	}
	if !IsNil(o.InputPortIdsEgress) {
		toSerialize["input_port_ids_egress"] = o.InputPortIdsEgress
	}
	if !IsNil(o.InputPortIdsIngress) {
		toSerialize["input_port_ids_ingress"] = o.InputPortIdsIngress
	}
	if !IsNil(o.OutputPortId) {
		toSerialize["output_port_id"] = o.OutputPortId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchMatchingRulePortMirroringValue) UnmarshalJSON(data []byte) (err error) {
	varSwitchMatchingRulePortMirroringValue := _SwitchMatchingRulePortMirroringValue{}

	err = json.Unmarshal(data, &varSwitchMatchingRulePortMirroringValue)

	if err != nil {
		return err
	}

	*o = SwitchMatchingRulePortMirroringValue(varSwitchMatchingRulePortMirroringValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "input_networks_ingress")
		delete(additionalProperties, "input_port_ids_egress")
		delete(additionalProperties, "input_port_ids_ingress")
		delete(additionalProperties, "output_port_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchMatchingRulePortMirroringValue struct {
	value *SwitchMatchingRulePortMirroringValue
	isSet bool
}

func (v NullableSwitchMatchingRulePortMirroringValue) Get() *SwitchMatchingRulePortMirroringValue {
	return v.value
}

func (v *NullableSwitchMatchingRulePortMirroringValue) Set(val *SwitchMatchingRulePortMirroringValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchMatchingRulePortMirroringValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchMatchingRulePortMirroringValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchMatchingRulePortMirroringValue(val *SwitchMatchingRulePortMirroringValue) *NullableSwitchMatchingRulePortMirroringValue {
	return &NullableSwitchMatchingRulePortMirroringValue{value: val, isSet: true}
}

func (v NullableSwitchMatchingRulePortMirroringValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchMatchingRulePortMirroringValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


