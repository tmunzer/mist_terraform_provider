/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SwitchExtraRoutesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchExtraRoutesValue{}

// SwitchExtraRoutesValue struct for SwitchExtraRoutesValue
type SwitchExtraRoutesValue struct {
	// this takes precedence
	Discard *bool `json:"discard,omitempty"`
	Metric NullableInt32 `json:"metric,omitempty"`
	NextQualified *map[string]SwitchExtraRoutesValueNextQualifiedValue `json:"next_qualified,omitempty"`
	NoResolve *bool `json:"no_resolve,omitempty"`
	Preference NullableInt32 `json:"preference,omitempty"`
	// next-hop IP Address
	Via *string `json:"via,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchExtraRoutesValue SwitchExtraRoutesValue

// NewSwitchExtraRoutesValue instantiates a new SwitchExtraRoutesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchExtraRoutesValue() *SwitchExtraRoutesValue {
	this := SwitchExtraRoutesValue{}
	var discard bool = false
	this.Discard = &discard
	var noResolve bool = false
	this.NoResolve = &noResolve
	return &this
}

// NewSwitchExtraRoutesValueWithDefaults instantiates a new SwitchExtraRoutesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchExtraRoutesValueWithDefaults() *SwitchExtraRoutesValue {
	this := SwitchExtraRoutesValue{}
	var discard bool = false
	this.Discard = &discard
	var noResolve bool = false
	this.NoResolve = &noResolve
	return &this
}

// GetDiscard returns the Discard field value if set, zero value otherwise.
func (o *SwitchExtraRoutesValue) GetDiscard() bool {
	if o == nil || IsNil(o.Discard) {
		var ret bool
		return ret
	}
	return *o.Discard
}

// GetDiscardOk returns a tuple with the Discard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchExtraRoutesValue) GetDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.Discard) {
		return nil, false
	}
	return o.Discard, true
}

// HasDiscard returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasDiscard() bool {
	if o != nil && !IsNil(o.Discard) {
		return true
	}

	return false
}

// SetDiscard gets a reference to the given bool and assigns it to the Discard field.
func (o *SwitchExtraRoutesValue) SetDiscard(v bool) {
	o.Discard = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchExtraRoutesValue) GetMetric() int32 {
	if o == nil || IsNil(o.Metric.Get()) {
		var ret int32
		return ret
	}
	return *o.Metric.Get()
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchExtraRoutesValue) GetMetricOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metric.Get(), o.Metric.IsSet()
}

// HasMetric returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasMetric() bool {
	if o != nil && o.Metric.IsSet() {
		return true
	}

	return false
}

// SetMetric gets a reference to the given NullableInt32 and assigns it to the Metric field.
func (o *SwitchExtraRoutesValue) SetMetric(v int32) {
	o.Metric.Set(&v)
}
// SetMetricNil sets the value for Metric to be an explicit nil
func (o *SwitchExtraRoutesValue) SetMetricNil() {
	o.Metric.Set(nil)
}

// UnsetMetric ensures that no value is present for Metric, not even an explicit nil
func (o *SwitchExtraRoutesValue) UnsetMetric() {
	o.Metric.Unset()
}

// GetNextQualified returns the NextQualified field value if set, zero value otherwise.
func (o *SwitchExtraRoutesValue) GetNextQualified() map[string]SwitchExtraRoutesValueNextQualifiedValue {
	if o == nil || IsNil(o.NextQualified) {
		var ret map[string]SwitchExtraRoutesValueNextQualifiedValue
		return ret
	}
	return *o.NextQualified
}

// GetNextQualifiedOk returns a tuple with the NextQualified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchExtraRoutesValue) GetNextQualifiedOk() (*map[string]SwitchExtraRoutesValueNextQualifiedValue, bool) {
	if o == nil || IsNil(o.NextQualified) {
		return nil, false
	}
	return o.NextQualified, true
}

// HasNextQualified returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasNextQualified() bool {
	if o != nil && !IsNil(o.NextQualified) {
		return true
	}

	return false
}

// SetNextQualified gets a reference to the given map[string]SwitchExtraRoutesValueNextQualifiedValue and assigns it to the NextQualified field.
func (o *SwitchExtraRoutesValue) SetNextQualified(v map[string]SwitchExtraRoutesValueNextQualifiedValue) {
	o.NextQualified = &v
}

// GetNoResolve returns the NoResolve field value if set, zero value otherwise.
func (o *SwitchExtraRoutesValue) GetNoResolve() bool {
	if o == nil || IsNil(o.NoResolve) {
		var ret bool
		return ret
	}
	return *o.NoResolve
}

// GetNoResolveOk returns a tuple with the NoResolve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchExtraRoutesValue) GetNoResolveOk() (*bool, bool) {
	if o == nil || IsNil(o.NoResolve) {
		return nil, false
	}
	return o.NoResolve, true
}

// HasNoResolve returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasNoResolve() bool {
	if o != nil && !IsNil(o.NoResolve) {
		return true
	}

	return false
}

// SetNoResolve gets a reference to the given bool and assigns it to the NoResolve field.
func (o *SwitchExtraRoutesValue) SetNoResolve(v bool) {
	o.NoResolve = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchExtraRoutesValue) GetPreference() int32 {
	if o == nil || IsNil(o.Preference.Get()) {
		var ret int32
		return ret
	}
	return *o.Preference.Get()
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchExtraRoutesValue) GetPreferenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preference.Get(), o.Preference.IsSet()
}

// HasPreference returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasPreference() bool {
	if o != nil && o.Preference.IsSet() {
		return true
	}

	return false
}

// SetPreference gets a reference to the given NullableInt32 and assigns it to the Preference field.
func (o *SwitchExtraRoutesValue) SetPreference(v int32) {
	o.Preference.Set(&v)
}
// SetPreferenceNil sets the value for Preference to be an explicit nil
func (o *SwitchExtraRoutesValue) SetPreferenceNil() {
	o.Preference.Set(nil)
}

// UnsetPreference ensures that no value is present for Preference, not even an explicit nil
func (o *SwitchExtraRoutesValue) UnsetPreference() {
	o.Preference.Unset()
}

// GetVia returns the Via field value if set, zero value otherwise.
func (o *SwitchExtraRoutesValue) GetVia() string {
	if o == nil || IsNil(o.Via) {
		var ret string
		return ret
	}
	return *o.Via
}

// GetViaOk returns a tuple with the Via field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchExtraRoutesValue) GetViaOk() (*string, bool) {
	if o == nil || IsNil(o.Via) {
		return nil, false
	}
	return o.Via, true
}

// HasVia returns a boolean if a field has been set.
func (o *SwitchExtraRoutesValue) HasVia() bool {
	if o != nil && !IsNil(o.Via) {
		return true
	}

	return false
}

// SetVia gets a reference to the given string and assigns it to the Via field.
func (o *SwitchExtraRoutesValue) SetVia(v string) {
	o.Via = &v
}

func (o SwitchExtraRoutesValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchExtraRoutesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Discard) {
		toSerialize["discard"] = o.Discard
	}
	if o.Metric.IsSet() {
		toSerialize["metric"] = o.Metric.Get()
	}
	if !IsNil(o.NextQualified) {
		toSerialize["next_qualified"] = o.NextQualified
	}
	if !IsNil(o.NoResolve) {
		toSerialize["no_resolve"] = o.NoResolve
	}
	if o.Preference.IsSet() {
		toSerialize["preference"] = o.Preference.Get()
	}
	if !IsNil(o.Via) {
		toSerialize["via"] = o.Via
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchExtraRoutesValue) UnmarshalJSON(data []byte) (err error) {
	varSwitchExtraRoutesValue := _SwitchExtraRoutesValue{}

	err = json.Unmarshal(data, &varSwitchExtraRoutesValue)

	if err != nil {
		return err
	}

	*o = SwitchExtraRoutesValue(varSwitchExtraRoutesValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "discard")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "next_qualified")
		delete(additionalProperties, "no_resolve")
		delete(additionalProperties, "preference")
		delete(additionalProperties, "via")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchExtraRoutesValue struct {
	value *SwitchExtraRoutesValue
	isSet bool
}

func (v NullableSwitchExtraRoutesValue) Get() *SwitchExtraRoutesValue {
	return v.value
}

func (v *NullableSwitchExtraRoutesValue) Set(val *SwitchExtraRoutesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchExtraRoutesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchExtraRoutesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchExtraRoutesValue(val *SwitchExtraRoutesValue) *NullableSwitchExtraRoutesValue {
	return &NullableSwitchExtraRoutesValue{value: val, isSet: true}
}

func (v NullableSwitchExtraRoutesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchExtraRoutesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


