/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WebhookLocationEventWifiBeaconExtendedInfoItems type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookLocationEventWifiBeaconExtendedInfoItems{}

// WebhookLocationEventWifiBeaconExtendedInfoItems struct for WebhookLocationEventWifiBeaconExtendedInfoItems
type WebhookLocationEventWifiBeaconExtendedInfoItems struct {
	// frame control field of 802.11 header
	FrameCtrl *int32 `json:"frame_ctrl,omitempty"`
	// Extended Info Payload associated with frame
	Payload *string `json:"payload,omitempty"`
	// sequence control field of 802.11 header
	SeqCtrl *int32 `json:"seq_ctrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookLocationEventWifiBeaconExtendedInfoItems WebhookLocationEventWifiBeaconExtendedInfoItems

// NewWebhookLocationEventWifiBeaconExtendedInfoItems instantiates a new WebhookLocationEventWifiBeaconExtendedInfoItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookLocationEventWifiBeaconExtendedInfoItems() *WebhookLocationEventWifiBeaconExtendedInfoItems {
	this := WebhookLocationEventWifiBeaconExtendedInfoItems{}
	return &this
}

// NewWebhookLocationEventWifiBeaconExtendedInfoItemsWithDefaults instantiates a new WebhookLocationEventWifiBeaconExtendedInfoItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookLocationEventWifiBeaconExtendedInfoItemsWithDefaults() *WebhookLocationEventWifiBeaconExtendedInfoItems {
	this := WebhookLocationEventWifiBeaconExtendedInfoItems{}
	return &this
}

// GetFrameCtrl returns the FrameCtrl field value if set, zero value otherwise.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetFrameCtrl() int32 {
	if o == nil || IsNil(o.FrameCtrl) {
		var ret int32
		return ret
	}
	return *o.FrameCtrl
}

// GetFrameCtrlOk returns a tuple with the FrameCtrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetFrameCtrlOk() (*int32, bool) {
	if o == nil || IsNil(o.FrameCtrl) {
		return nil, false
	}
	return o.FrameCtrl, true
}

// HasFrameCtrl returns a boolean if a field has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) HasFrameCtrl() bool {
	if o != nil && !IsNil(o.FrameCtrl) {
		return true
	}

	return false
}

// SetFrameCtrl gets a reference to the given int32 and assigns it to the FrameCtrl field.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) SetFrameCtrl(v int32) {
	o.FrameCtrl = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) SetPayload(v string) {
	o.Payload = &v
}

// GetSeqCtrl returns the SeqCtrl field value if set, zero value otherwise.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetSeqCtrl() int32 {
	if o == nil || IsNil(o.SeqCtrl) {
		var ret int32
		return ret
	}
	return *o.SeqCtrl
}

// GetSeqCtrlOk returns a tuple with the SeqCtrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) GetSeqCtrlOk() (*int32, bool) {
	if o == nil || IsNil(o.SeqCtrl) {
		return nil, false
	}
	return o.SeqCtrl, true
}

// HasSeqCtrl returns a boolean if a field has been set.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) HasSeqCtrl() bool {
	if o != nil && !IsNil(o.SeqCtrl) {
		return true
	}

	return false
}

// SetSeqCtrl gets a reference to the given int32 and assigns it to the SeqCtrl field.
func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) SetSeqCtrl(v int32) {
	o.SeqCtrl = &v
}

func (o WebhookLocationEventWifiBeaconExtendedInfoItems) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookLocationEventWifiBeaconExtendedInfoItems) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FrameCtrl) {
		toSerialize["frame_ctrl"] = o.FrameCtrl
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.SeqCtrl) {
		toSerialize["seq_ctrl"] = o.SeqCtrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookLocationEventWifiBeaconExtendedInfoItems) UnmarshalJSON(data []byte) (err error) {
	varWebhookLocationEventWifiBeaconExtendedInfoItems := _WebhookLocationEventWifiBeaconExtendedInfoItems{}

	err = json.Unmarshal(data, &varWebhookLocationEventWifiBeaconExtendedInfoItems)

	if err != nil {
		return err
	}

	*o = WebhookLocationEventWifiBeaconExtendedInfoItems(varWebhookLocationEventWifiBeaconExtendedInfoItems)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "frame_ctrl")
		delete(additionalProperties, "payload")
		delete(additionalProperties, "seq_ctrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookLocationEventWifiBeaconExtendedInfoItems struct {
	value *WebhookLocationEventWifiBeaconExtendedInfoItems
	isSet bool
}

func (v NullableWebhookLocationEventWifiBeaconExtendedInfoItems) Get() *WebhookLocationEventWifiBeaconExtendedInfoItems {
	return v.value
}

func (v *NullableWebhookLocationEventWifiBeaconExtendedInfoItems) Set(val *WebhookLocationEventWifiBeaconExtendedInfoItems) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookLocationEventWifiBeaconExtendedInfoItems) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookLocationEventWifiBeaconExtendedInfoItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookLocationEventWifiBeaconExtendedInfoItems(val *WebhookLocationEventWifiBeaconExtendedInfoItems) *NullableWebhookLocationEventWifiBeaconExtendedInfoItems {
	return &NullableWebhookLocationEventWifiBeaconExtendedInfoItems{value: val, isSet: true}
}

func (v NullableWebhookLocationEventWifiBeaconExtendedInfoItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookLocationEventWifiBeaconExtendedInfoItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


