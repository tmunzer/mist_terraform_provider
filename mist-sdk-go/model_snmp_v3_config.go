/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SnmpV3Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpV3Config{}

// SnmpV3Config struct for SnmpV3Config
type SnmpV3Config struct {
	Notify []SnmpV3ConfigNotifyInner `json:"notify,omitempty"`
	NotifyFilter []SnmpV3ConfigNotifyFilterInner `json:"notify_filter,omitempty"`
	TargetAddress []SnmpV3ConfigTargetAddressInner `json:"target_address,omitempty"`
	TargetParameters []SnmpV3ConfigTargetParametersInner `json:"target_parameters,omitempty"`
	Usm *SnmpUsm `json:"usm,omitempty"`
	Vacm *SnmpVacm `json:"vacm,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnmpV3Config SnmpV3Config

// NewSnmpV3Config instantiates a new SnmpV3Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpV3Config() *SnmpV3Config {
	this := SnmpV3Config{}
	return &this
}

// NewSnmpV3ConfigWithDefaults instantiates a new SnmpV3Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpV3ConfigWithDefaults() *SnmpV3Config {
	this := SnmpV3Config{}
	return &this
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *SnmpV3Config) GetNotify() []SnmpV3ConfigNotifyInner {
	if o == nil || IsNil(o.Notify) {
		var ret []SnmpV3ConfigNotifyInner
		return ret
	}
	return o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetNotifyOk() ([]SnmpV3ConfigNotifyInner, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *SnmpV3Config) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given []SnmpV3ConfigNotifyInner and assigns it to the Notify field.
func (o *SnmpV3Config) SetNotify(v []SnmpV3ConfigNotifyInner) {
	o.Notify = v
}

// GetNotifyFilter returns the NotifyFilter field value if set, zero value otherwise.
func (o *SnmpV3Config) GetNotifyFilter() []SnmpV3ConfigNotifyFilterInner {
	if o == nil || IsNil(o.NotifyFilter) {
		var ret []SnmpV3ConfigNotifyFilterInner
		return ret
	}
	return o.NotifyFilter
}

// GetNotifyFilterOk returns a tuple with the NotifyFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetNotifyFilterOk() ([]SnmpV3ConfigNotifyFilterInner, bool) {
	if o == nil || IsNil(o.NotifyFilter) {
		return nil, false
	}
	return o.NotifyFilter, true
}

// HasNotifyFilter returns a boolean if a field has been set.
func (o *SnmpV3Config) HasNotifyFilter() bool {
	if o != nil && !IsNil(o.NotifyFilter) {
		return true
	}

	return false
}

// SetNotifyFilter gets a reference to the given []SnmpV3ConfigNotifyFilterInner and assigns it to the NotifyFilter field.
func (o *SnmpV3Config) SetNotifyFilter(v []SnmpV3ConfigNotifyFilterInner) {
	o.NotifyFilter = v
}

// GetTargetAddress returns the TargetAddress field value if set, zero value otherwise.
func (o *SnmpV3Config) GetTargetAddress() []SnmpV3ConfigTargetAddressInner {
	if o == nil || IsNil(o.TargetAddress) {
		var ret []SnmpV3ConfigTargetAddressInner
		return ret
	}
	return o.TargetAddress
}

// GetTargetAddressOk returns a tuple with the TargetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetTargetAddressOk() ([]SnmpV3ConfigTargetAddressInner, bool) {
	if o == nil || IsNil(o.TargetAddress) {
		return nil, false
	}
	return o.TargetAddress, true
}

// HasTargetAddress returns a boolean if a field has been set.
func (o *SnmpV3Config) HasTargetAddress() bool {
	if o != nil && !IsNil(o.TargetAddress) {
		return true
	}

	return false
}

// SetTargetAddress gets a reference to the given []SnmpV3ConfigTargetAddressInner and assigns it to the TargetAddress field.
func (o *SnmpV3Config) SetTargetAddress(v []SnmpV3ConfigTargetAddressInner) {
	o.TargetAddress = v
}

// GetTargetParameters returns the TargetParameters field value if set, zero value otherwise.
func (o *SnmpV3Config) GetTargetParameters() []SnmpV3ConfigTargetParametersInner {
	if o == nil || IsNil(o.TargetParameters) {
		var ret []SnmpV3ConfigTargetParametersInner
		return ret
	}
	return o.TargetParameters
}

// GetTargetParametersOk returns a tuple with the TargetParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetTargetParametersOk() ([]SnmpV3ConfigTargetParametersInner, bool) {
	if o == nil || IsNil(o.TargetParameters) {
		return nil, false
	}
	return o.TargetParameters, true
}

// HasTargetParameters returns a boolean if a field has been set.
func (o *SnmpV3Config) HasTargetParameters() bool {
	if o != nil && !IsNil(o.TargetParameters) {
		return true
	}

	return false
}

// SetTargetParameters gets a reference to the given []SnmpV3ConfigTargetParametersInner and assigns it to the TargetParameters field.
func (o *SnmpV3Config) SetTargetParameters(v []SnmpV3ConfigTargetParametersInner) {
	o.TargetParameters = v
}

// GetUsm returns the Usm field value if set, zero value otherwise.
func (o *SnmpV3Config) GetUsm() SnmpUsm {
	if o == nil || IsNil(o.Usm) {
		var ret SnmpUsm
		return ret
	}
	return *o.Usm
}

// GetUsmOk returns a tuple with the Usm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetUsmOk() (*SnmpUsm, bool) {
	if o == nil || IsNil(o.Usm) {
		return nil, false
	}
	return o.Usm, true
}

// HasUsm returns a boolean if a field has been set.
func (o *SnmpV3Config) HasUsm() bool {
	if o != nil && !IsNil(o.Usm) {
		return true
	}

	return false
}

// SetUsm gets a reference to the given SnmpUsm and assigns it to the Usm field.
func (o *SnmpV3Config) SetUsm(v SnmpUsm) {
	o.Usm = &v
}

// GetVacm returns the Vacm field value if set, zero value otherwise.
func (o *SnmpV3Config) GetVacm() SnmpVacm {
	if o == nil || IsNil(o.Vacm) {
		var ret SnmpVacm
		return ret
	}
	return *o.Vacm
}

// GetVacmOk returns a tuple with the Vacm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3Config) GetVacmOk() (*SnmpVacm, bool) {
	if o == nil || IsNil(o.Vacm) {
		return nil, false
	}
	return o.Vacm, true
}

// HasVacm returns a boolean if a field has been set.
func (o *SnmpV3Config) HasVacm() bool {
	if o != nil && !IsNil(o.Vacm) {
		return true
	}

	return false
}

// SetVacm gets a reference to the given SnmpVacm and assigns it to the Vacm field.
func (o *SnmpV3Config) SetVacm(v SnmpVacm) {
	o.Vacm = &v
}

func (o SnmpV3Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpV3Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.NotifyFilter) {
		toSerialize["notify_filter"] = o.NotifyFilter
	}
	if !IsNil(o.TargetAddress) {
		toSerialize["target_address"] = o.TargetAddress
	}
	if !IsNil(o.TargetParameters) {
		toSerialize["target_parameters"] = o.TargetParameters
	}
	if !IsNil(o.Usm) {
		toSerialize["usm"] = o.Usm
	}
	if !IsNil(o.Vacm) {
		toSerialize["vacm"] = o.Vacm
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnmpV3Config) UnmarshalJSON(data []byte) (err error) {
	varSnmpV3Config := _SnmpV3Config{}

	err = json.Unmarshal(data, &varSnmpV3Config)

	if err != nil {
		return err
	}

	*o = SnmpV3Config(varSnmpV3Config)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "notify")
		delete(additionalProperties, "notify_filter")
		delete(additionalProperties, "target_address")
		delete(additionalProperties, "target_parameters")
		delete(additionalProperties, "usm")
		delete(additionalProperties, "vacm")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpV3Config struct {
	value *SnmpV3Config
	isSet bool
}

func (v NullableSnmpV3Config) Get() *SnmpV3Config {
	return v.value
}

func (v *NullableSnmpV3Config) Set(val *SnmpV3Config) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpV3Config) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpV3Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpV3Config(val *SnmpV3Config) *NullableSnmpV3Config {
	return &NullableSnmpV3Config{value: val, isSet: true}
}

func (v NullableSnmpV3Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpV3Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


