/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookAlarmEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookAlarmEvent{}

// WebhookAlarmEvent struct for WebhookAlarmEvent
type WebhookAlarmEvent struct {
	Aps []string `json:"aps,omitempty"`
	Bssids []string `json:"bssids,omitempty"`
	// If present, represents number of events of given type occurred in current interval, default=1
	Count *int32 `json:"count,omitempty"`
	// event id
	EventId *string `json:"event_id,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Id string `json:"id"`
	LastSeen float32 `json:"last_seen"`
	Node *HaClusterNodeEnum `json:"node,omitempty"`
	OrgId string `json:"org_id"`
	SiteId string `json:"site_id"`
	Ssids []string `json:"ssids,omitempty"`
	Timestamp int32 `json:"timestamp"`
	// event type
	Type string `json:"type"`
	// If presents, represents that this is an update to event with given id sent earlier. default=false
	Update *bool `json:"update,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookAlarmEvent WebhookAlarmEvent

// NewWebhookAlarmEvent instantiates a new WebhookAlarmEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookAlarmEvent(id string, lastSeen float32, orgId string, siteId string, timestamp int32, type_ string) *WebhookAlarmEvent {
	this := WebhookAlarmEvent{}
	this.Id = id
	this.LastSeen = lastSeen
	this.OrgId = orgId
	this.SiteId = siteId
	this.Timestamp = timestamp
	this.Type = type_
	return &this
}

// NewWebhookAlarmEventWithDefaults instantiates a new WebhookAlarmEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookAlarmEventWithDefaults() *WebhookAlarmEvent {
	this := WebhookAlarmEvent{}
	return &this
}

// GetAps returns the Aps field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetAps() []string {
	if o == nil || IsNil(o.Aps) {
		var ret []string
		return ret
	}
	return o.Aps
}

// GetApsOk returns a tuple with the Aps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetApsOk() ([]string, bool) {
	if o == nil || IsNil(o.Aps) {
		return nil, false
	}
	return o.Aps, true
}

// HasAps returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasAps() bool {
	if o != nil && !IsNil(o.Aps) {
		return true
	}

	return false
}

// SetAps gets a reference to the given []string and assigns it to the Aps field.
func (o *WebhookAlarmEvent) SetAps(v []string) {
	o.Aps = v
}

// GetBssids returns the Bssids field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetBssids() []string {
	if o == nil || IsNil(o.Bssids) {
		var ret []string
		return ret
	}
	return o.Bssids
}

// GetBssidsOk returns a tuple with the Bssids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetBssidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Bssids) {
		return nil, false
	}
	return o.Bssids, true
}

// HasBssids returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasBssids() bool {
	if o != nil && !IsNil(o.Bssids) {
		return true
	}

	return false
}

// SetBssids gets a reference to the given []string and assigns it to the Bssids field.
func (o *WebhookAlarmEvent) SetBssids(v []string) {
	o.Bssids = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *WebhookAlarmEvent) SetCount(v int32) {
	o.Count = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *WebhookAlarmEvent) SetEventId(v string) {
	o.EventId = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *WebhookAlarmEvent) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value
func (o *WebhookAlarmEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookAlarmEvent) SetId(v string) {
	o.Id = v
}

// GetLastSeen returns the LastSeen field value
func (o *WebhookAlarmEvent) GetLastSeen() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetLastSeenOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *WebhookAlarmEvent) SetLastSeen(v float32) {
	o.LastSeen = v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetNode() HaClusterNodeEnum {
	if o == nil || IsNil(o.Node) {
		var ret HaClusterNodeEnum
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetNodeOk() (*HaClusterNodeEnum, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given HaClusterNodeEnum and assigns it to the Node field.
func (o *WebhookAlarmEvent) SetNode(v HaClusterNodeEnum) {
	o.Node = &v
}

// GetOrgId returns the OrgId field value
func (o *WebhookAlarmEvent) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *WebhookAlarmEvent) SetOrgId(v string) {
	o.OrgId = v
}

// GetSiteId returns the SiteId field value
func (o *WebhookAlarmEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookAlarmEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetSsids returns the Ssids field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetSsids() []string {
	if o == nil || IsNil(o.Ssids) {
		var ret []string
		return ret
	}
	return o.Ssids
}

// GetSsidsOk returns a tuple with the Ssids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetSsidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ssids) {
		return nil, false
	}
	return o.Ssids, true
}

// HasSsids returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasSsids() bool {
	if o != nil && !IsNil(o.Ssids) {
		return true
	}

	return false
}

// SetSsids gets a reference to the given []string and assigns it to the Ssids field.
func (o *WebhookAlarmEvent) SetSsids(v []string) {
	o.Ssids = v
}

// GetTimestamp returns the Timestamp field value
func (o *WebhookAlarmEvent) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebhookAlarmEvent) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *WebhookAlarmEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookAlarmEvent) SetType(v string) {
	o.Type = v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *WebhookAlarmEvent) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookAlarmEvent) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *WebhookAlarmEvent) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *WebhookAlarmEvent) SetUpdate(v bool) {
	o.Update = &v
}

func (o WebhookAlarmEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookAlarmEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aps) {
		toSerialize["aps"] = o.Aps
	}
	if !IsNil(o.Bssids) {
		toSerialize["bssids"] = o.Bssids
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	toSerialize["id"] = o.Id
	toSerialize["last_seen"] = o.LastSeen
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	toSerialize["org_id"] = o.OrgId
	toSerialize["site_id"] = o.SiteId
	if !IsNil(o.Ssids) {
		toSerialize["ssids"] = o.Ssids
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookAlarmEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"last_seen",
		"org_id",
		"site_id",
		"timestamp",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookAlarmEvent := _WebhookAlarmEvent{}

	err = json.Unmarshal(data, &varWebhookAlarmEvent)

	if err != nil {
		return err
	}

	*o = WebhookAlarmEvent(varWebhookAlarmEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aps")
		delete(additionalProperties, "bssids")
		delete(additionalProperties, "count")
		delete(additionalProperties, "event_id")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "node")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "ssids")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		delete(additionalProperties, "update")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookAlarmEvent struct {
	value *WebhookAlarmEvent
	isSet bool
}

func (v NullableWebhookAlarmEvent) Get() *WebhookAlarmEvent {
	return v.value
}

func (v *NullableWebhookAlarmEvent) Set(val *WebhookAlarmEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookAlarmEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookAlarmEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookAlarmEvent(val *WebhookAlarmEvent) *NullableWebhookAlarmEvent {
	return &NullableWebhookAlarmEvent{value: val, isSet: true}
}

func (v NullableWebhookAlarmEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookAlarmEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


