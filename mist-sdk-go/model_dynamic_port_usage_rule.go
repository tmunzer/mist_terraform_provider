/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the DynamicPortUsageRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicPortUsageRule{}

// DynamicPortUsageRule struct for DynamicPortUsageRule
type DynamicPortUsageRule struct {
	Equals *string `json:"equals,omitempty"`
	// use `equals_any` to match any item in a list
	EqualsAny []string `json:"equals_any,omitempty"`
	// \"[0:3]\":\"abcdef\" -> \"abc\" \"split(.)[1]\": \"a.b.c\" -> \"b\" \"split(-)[1][0:3]: \"a1234-b5678-c90\" -> \"b56\"
	Expression *string `json:"expression,omitempty"`
	Src DynamicPortUsageRuleSrc `json:"src"`
	// `port_usage` name
	Usage *string `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DynamicPortUsageRule DynamicPortUsageRule

// NewDynamicPortUsageRule instantiates a new DynamicPortUsageRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicPortUsageRule(src DynamicPortUsageRuleSrc) *DynamicPortUsageRule {
	this := DynamicPortUsageRule{}
	this.Src = src
	return &this
}

// NewDynamicPortUsageRuleWithDefaults instantiates a new DynamicPortUsageRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicPortUsageRuleWithDefaults() *DynamicPortUsageRule {
	this := DynamicPortUsageRule{}
	return &this
}

// GetEquals returns the Equals field value if set, zero value otherwise.
func (o *DynamicPortUsageRule) GetEquals() string {
	if o == nil || IsNil(o.Equals) {
		var ret string
		return ret
	}
	return *o.Equals
}

// GetEqualsOk returns a tuple with the Equals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsageRule) GetEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.Equals) {
		return nil, false
	}
	return o.Equals, true
}

// HasEquals returns a boolean if a field has been set.
func (o *DynamicPortUsageRule) HasEquals() bool {
	if o != nil && !IsNil(o.Equals) {
		return true
	}

	return false
}

// SetEquals gets a reference to the given string and assigns it to the Equals field.
func (o *DynamicPortUsageRule) SetEquals(v string) {
	o.Equals = &v
}

// GetEqualsAny returns the EqualsAny field value if set, zero value otherwise.
func (o *DynamicPortUsageRule) GetEqualsAny() []string {
	if o == nil || IsNil(o.EqualsAny) {
		var ret []string
		return ret
	}
	return o.EqualsAny
}

// GetEqualsAnyOk returns a tuple with the EqualsAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsageRule) GetEqualsAnyOk() ([]string, bool) {
	if o == nil || IsNil(o.EqualsAny) {
		return nil, false
	}
	return o.EqualsAny, true
}

// HasEqualsAny returns a boolean if a field has been set.
func (o *DynamicPortUsageRule) HasEqualsAny() bool {
	if o != nil && !IsNil(o.EqualsAny) {
		return true
	}

	return false
}

// SetEqualsAny gets a reference to the given []string and assigns it to the EqualsAny field.
func (o *DynamicPortUsageRule) SetEqualsAny(v []string) {
	o.EqualsAny = v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *DynamicPortUsageRule) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsageRule) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *DynamicPortUsageRule) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *DynamicPortUsageRule) SetExpression(v string) {
	o.Expression = &v
}

// GetSrc returns the Src field value
func (o *DynamicPortUsageRule) GetSrc() DynamicPortUsageRuleSrc {
	if o == nil {
		var ret DynamicPortUsageRuleSrc
		return ret
	}

	return o.Src
}

// GetSrcOk returns a tuple with the Src field value
// and a boolean to check if the value has been set.
func (o *DynamicPortUsageRule) GetSrcOk() (*DynamicPortUsageRuleSrc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Src, true
}

// SetSrc sets field value
func (o *DynamicPortUsageRule) SetSrc(v DynamicPortUsageRuleSrc) {
	o.Src = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *DynamicPortUsageRule) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsageRule) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *DynamicPortUsageRule) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *DynamicPortUsageRule) SetUsage(v string) {
	o.Usage = &v
}

func (o DynamicPortUsageRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicPortUsageRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Equals) {
		toSerialize["equals"] = o.Equals
	}
	if !IsNil(o.EqualsAny) {
		toSerialize["equals_any"] = o.EqualsAny
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	toSerialize["src"] = o.Src
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DynamicPortUsageRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"src",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDynamicPortUsageRule := _DynamicPortUsageRule{}

	err = json.Unmarshal(data, &varDynamicPortUsageRule)

	if err != nil {
		return err
	}

	*o = DynamicPortUsageRule(varDynamicPortUsageRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "equals")
		delete(additionalProperties, "equals_any")
		delete(additionalProperties, "expression")
		delete(additionalProperties, "src")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDynamicPortUsageRule struct {
	value *DynamicPortUsageRule
	isSet bool
}

func (v NullableDynamicPortUsageRule) Get() *DynamicPortUsageRule {
	return v.value
}

func (v *NullableDynamicPortUsageRule) Set(val *DynamicPortUsageRule) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicPortUsageRule) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicPortUsageRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicPortUsageRule(val *DynamicPortUsageRule) *NullableDynamicPortUsageRule {
	return &NullableDynamicPortUsageRule{value: val, isSet: true}
}

func (v NullableDynamicPortUsageRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicPortUsageRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


