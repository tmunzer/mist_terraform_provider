/*
Mist API

> Version: **2406.1.7** > > Date: **June 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.7
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WebhookNacEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookNacEvents{}

// WebhookNacEvents struct for WebhookNacEvents
type WebhookNacEvents struct {
	Events []WebhookNacEventsEvent `json:"events,omitempty"`
	Topic *string `json:"topic,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebhookNacEvents WebhookNacEvents

// NewWebhookNacEvents instantiates a new WebhookNacEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookNacEvents() *WebhookNacEvents {
	this := WebhookNacEvents{}
	var topic string = "nac_events"
	this.Topic = &topic
	return &this
}

// NewWebhookNacEventsWithDefaults instantiates a new WebhookNacEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookNacEventsWithDefaults() *WebhookNacEvents {
	this := WebhookNacEvents{}
	var topic string = "nac_events"
	this.Topic = &topic
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *WebhookNacEvents) GetEvents() []WebhookNacEventsEvent {
	if o == nil || IsNil(o.Events) {
		var ret []WebhookNacEventsEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacEvents) GetEventsOk() ([]WebhookNacEventsEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *WebhookNacEvents) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []WebhookNacEventsEvent and assigns it to the Events field.
func (o *WebhookNacEvents) SetEvents(v []WebhookNacEventsEvent) {
	o.Events = v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *WebhookNacEvents) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNacEvents) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *WebhookNacEvents) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *WebhookNacEvents) SetTopic(v string) {
	o.Topic = &v
}

func (o WebhookNacEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookNacEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookNacEvents) UnmarshalJSON(data []byte) (err error) {
	varWebhookNacEvents := _WebhookNacEvents{}

	err = json.Unmarshal(data, &varWebhookNacEvents)

	if err != nil {
		return err
	}

	*o = WebhookNacEvents(varWebhookNacEvents)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "topic")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookNacEvents struct {
	value *WebhookNacEvents
	isSet bool
}

func (v NullableWebhookNacEvents) Get() *WebhookNacEvents {
	return v.value
}

func (v *NullableWebhookNacEvents) Set(val *WebhookNacEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookNacEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookNacEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookNacEvents(val *WebhookNacEvents) *NullableWebhookNacEvents {
	return &NullableWebhookNacEvents{value: val, isSet: true}
}

func (v NullableWebhookNacEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookNacEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


