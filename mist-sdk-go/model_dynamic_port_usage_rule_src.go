/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// DynamicPortUsageRuleSrc the model 'DynamicPortUsageRuleSrc'
type DynamicPortUsageRuleSrc string

// List of dynamic_port_usage_rule_src
const (
	DYNAMICPORTUSAGERULESRC_EMPTY DynamicPortUsageRuleSrc = ""
	DYNAMICPORTUSAGERULESRC_LLDP_CHASSIS_ID DynamicPortUsageRuleSrc = "lldp_chassis_id"
	DYNAMICPORTUSAGERULESRC_LLDP_SYSTEM_NAME DynamicPortUsageRuleSrc = "lldp_system_name"
	DYNAMICPORTUSAGERULESRC_LLDP_SERIAL_NUMBER DynamicPortUsageRuleSrc = "lldp_serial_number"
	DYNAMICPORTUSAGERULESRC_LLDP_HARDWARE_REVISION DynamicPortUsageRuleSrc = "lldp_hardware_revision"
	DYNAMICPORTUSAGERULESRC_LLDP_MANUFACTURER_NAME DynamicPortUsageRuleSrc = "lldp_manufacturer_name"
	DYNAMICPORTUSAGERULESRC_LLDP_OUI DynamicPortUsageRuleSrc = "lldp_oui"
	DYNAMICPORTUSAGERULESRC_RADIUS_USERNAME DynamicPortUsageRuleSrc = "radius_username"
	DYNAMICPORTUSAGERULESRC_RADIUS_USERMAC DynamicPortUsageRuleSrc = "radius_usermac"
	DYNAMICPORTUSAGERULESRC_RADIUS_DYNAMICFILTER DynamicPortUsageRuleSrc = "radius_dynamicfilter"
	DYNAMICPORTUSAGERULESRC_LINK_PEERMAC DynamicPortUsageRuleSrc = "link_peermac"
)

// All allowed values of DynamicPortUsageRuleSrc enum
var AllowedDynamicPortUsageRuleSrcEnumValues = []DynamicPortUsageRuleSrc{
	"",
	"lldp_chassis_id",
	"lldp_system_name",
	"lldp_serial_number",
	"lldp_hardware_revision",
	"lldp_manufacturer_name",
	"lldp_oui",
	"radius_username",
	"radius_usermac",
	"radius_dynamicfilter",
	"link_peermac",
}

func (v *DynamicPortUsageRuleSrc) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DynamicPortUsageRuleSrc(value)
	for _, existing := range AllowedDynamicPortUsageRuleSrcEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DynamicPortUsageRuleSrc", value)
}

// NewDynamicPortUsageRuleSrcFromValue returns a pointer to a valid DynamicPortUsageRuleSrc
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDynamicPortUsageRuleSrcFromValue(v string) (*DynamicPortUsageRuleSrc, error) {
	ev := DynamicPortUsageRuleSrc(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DynamicPortUsageRuleSrc: valid values are %v", v, AllowedDynamicPortUsageRuleSrcEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DynamicPortUsageRuleSrc) IsValid() bool {
	for _, existing := range AllowedDynamicPortUsageRuleSrcEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dynamic_port_usage_rule_src value
func (v DynamicPortUsageRuleSrc) Ptr() *DynamicPortUsageRuleSrc {
	return &v
}

type NullableDynamicPortUsageRuleSrc struct {
	value *DynamicPortUsageRuleSrc
	isSet bool
}

func (v NullableDynamicPortUsageRuleSrc) Get() *DynamicPortUsageRuleSrc {
	return v.value
}

func (v *NullableDynamicPortUsageRuleSrc) Set(val *DynamicPortUsageRuleSrc) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicPortUsageRuleSrc) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicPortUsageRuleSrc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicPortUsageRuleSrc(val *DynamicPortUsageRuleSrc) *NullableDynamicPortUsageRuleSrc {
	return &NullableDynamicPortUsageRuleSrc{value: val, isSet: true}
}

func (v NullableDynamicPortUsageRuleSrc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicPortUsageRuleSrc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

