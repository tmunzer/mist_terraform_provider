/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the DynamicPortUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicPortUsage{}

// DynamicPortUsage This is a special mode where the actually usage is determined by a set of rules the port will start with `access` mode and isolated depending on the rules, if resolved, the port will have the resolved usage applied.
type DynamicPortUsage struct {
	Mode IpConfigType `json:"mode"`
	// Control when the DPC port should be changed to the default port usage Configuring to none will let the DPC port keep at the current port usage.
	ResetDefaultWhen *string `json:"reset_default_when,omitempty"`
	Rules []DynamicPortUsageRule `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DynamicPortUsage DynamicPortUsage

// NewDynamicPortUsage instantiates a new DynamicPortUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicPortUsage(mode IpConfigType) *DynamicPortUsage {
	this := DynamicPortUsage{}
	this.Mode = mode
	var resetDefaultWhen string = "link_down"
	this.ResetDefaultWhen = &resetDefaultWhen
	return &this
}

// NewDynamicPortUsageWithDefaults instantiates a new DynamicPortUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicPortUsageWithDefaults() *DynamicPortUsage {
	this := DynamicPortUsage{}
	var mode IpConfigType = IPCONFIGTYPE_DYNAMIC
	this.Mode = mode
	var resetDefaultWhen string = "link_down"
	this.ResetDefaultWhen = &resetDefaultWhen
	return &this
}

// GetMode returns the Mode field value
func (o *DynamicPortUsage) GetMode() IpConfigType {
	if o == nil {
		var ret IpConfigType
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *DynamicPortUsage) GetModeOk() (*IpConfigType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *DynamicPortUsage) SetMode(v IpConfigType) {
	o.Mode = v
}

// GetResetDefaultWhen returns the ResetDefaultWhen field value if set, zero value otherwise.
func (o *DynamicPortUsage) GetResetDefaultWhen() string {
	if o == nil || IsNil(o.ResetDefaultWhen) {
		var ret string
		return ret
	}
	return *o.ResetDefaultWhen
}

// GetResetDefaultWhenOk returns a tuple with the ResetDefaultWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsage) GetResetDefaultWhenOk() (*string, bool) {
	if o == nil || IsNil(o.ResetDefaultWhen) {
		return nil, false
	}
	return o.ResetDefaultWhen, true
}

// HasResetDefaultWhen returns a boolean if a field has been set.
func (o *DynamicPortUsage) HasResetDefaultWhen() bool {
	if o != nil && !IsNil(o.ResetDefaultWhen) {
		return true
	}

	return false
}

// SetResetDefaultWhen gets a reference to the given string and assigns it to the ResetDefaultWhen field.
func (o *DynamicPortUsage) SetResetDefaultWhen(v string) {
	o.ResetDefaultWhen = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *DynamicPortUsage) GetRules() []DynamicPortUsageRule {
	if o == nil || IsNil(o.Rules) {
		var ret []DynamicPortUsageRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicPortUsage) GetRulesOk() ([]DynamicPortUsageRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *DynamicPortUsage) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []DynamicPortUsageRule and assigns it to the Rules field.
func (o *DynamicPortUsage) SetRules(v []DynamicPortUsageRule) {
	o.Rules = v
}

func (o DynamicPortUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicPortUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.ResetDefaultWhen) {
		toSerialize["reset_default_when"] = o.ResetDefaultWhen
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DynamicPortUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDynamicPortUsage := _DynamicPortUsage{}

	err = json.Unmarshal(data, &varDynamicPortUsage)

	if err != nil {
		return err
	}

	*o = DynamicPortUsage(varDynamicPortUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mode")
		delete(additionalProperties, "reset_default_when")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDynamicPortUsage struct {
	value *DynamicPortUsage
	isSet bool
}

func (v NullableDynamicPortUsage) Get() *DynamicPortUsage {
	return v.value
}

func (v *NullableDynamicPortUsage) Set(val *DynamicPortUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicPortUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicPortUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicPortUsage(val *DynamicPortUsage) *NullableDynamicPortUsage {
	return &NullableDynamicPortUsage{value: val, isSet: true}
}

func (v NullableDynamicPortUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicPortUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


