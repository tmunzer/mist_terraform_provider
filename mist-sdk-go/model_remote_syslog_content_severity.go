/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// RemoteSyslogContentSeverity the model 'RemoteSyslogContentSeverity'
type RemoteSyslogContentSeverity string

// List of remote_syslog_content_severity
const (
	REMOTESYSLOGCONTENTSEVERITY_ANY RemoteSyslogContentSeverity = "any"
	REMOTESYSLOGCONTENTSEVERITY_ALERT RemoteSyslogContentSeverity = "alert"
	REMOTESYSLOGCONTENTSEVERITY_EMERGENCY RemoteSyslogContentSeverity = "emergency"
	REMOTESYSLOGCONTENTSEVERITY_CRITICAL RemoteSyslogContentSeverity = "critical"
	REMOTESYSLOGCONTENTSEVERITY_WARNING RemoteSyslogContentSeverity = "warning"
	REMOTESYSLOGCONTENTSEVERITY_INFO RemoteSyslogContentSeverity = "info"
	REMOTESYSLOGCONTENTSEVERITY_NOTICE RemoteSyslogContentSeverity = "notice"
	REMOTESYSLOGCONTENTSEVERITY_ERROR RemoteSyslogContentSeverity = "error"
)

// All allowed values of RemoteSyslogContentSeverity enum
var AllowedRemoteSyslogContentSeverityEnumValues = []RemoteSyslogContentSeverity{
	"any",
	"alert",
	"emergency",
	"critical",
	"warning",
	"info",
	"notice",
	"error",
}

func (v *RemoteSyslogContentSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RemoteSyslogContentSeverity(value)
	for _, existing := range AllowedRemoteSyslogContentSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RemoteSyslogContentSeverity", value)
}

// NewRemoteSyslogContentSeverityFromValue returns a pointer to a valid RemoteSyslogContentSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteSyslogContentSeverityFromValue(v string) (*RemoteSyslogContentSeverity, error) {
	ev := RemoteSyslogContentSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteSyslogContentSeverity: valid values are %v", v, AllowedRemoteSyslogContentSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteSyslogContentSeverity) IsValid() bool {
	for _, existing := range AllowedRemoteSyslogContentSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to remote_syslog_content_severity value
func (v RemoteSyslogContentSeverity) Ptr() *RemoteSyslogContentSeverity {
	return &v
}

type NullableRemoteSyslogContentSeverity struct {
	value *RemoteSyslogContentSeverity
	isSet bool
}

func (v NullableRemoteSyslogContentSeverity) Get() *RemoteSyslogContentSeverity {
	return v.value
}

func (v *NullableRemoteSyslogContentSeverity) Set(val *RemoteSyslogContentSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslogContentSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslogContentSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslogContentSeverity(val *RemoteSyslogContentSeverity) *NullableRemoteSyslogContentSeverity {
	return &NullableRemoteSyslogContentSeverity{value: val, isSet: true}
}

func (v NullableRemoteSyslogContentSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslogContentSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

