/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SiteMxtunnelVlanId struct for SiteMxtunnelVlanId
type SiteMxtunnelVlanId struct {
	int32 *int32
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SiteMxtunnelVlanId) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.int32);
	if err == nil {
		jsonint32, _ := json.Marshal(dst.int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.int32 = nil
		} else {
			return nil // data stored in dst.int32, return on the first match
		}
	} else {
		dst.int32 = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SiteMxtunnelVlanId)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SiteMxtunnelVlanId) MarshalJSON() ([]byte, error) {
	if src.int32 != nil {
		return json.Marshal(&src.int32)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSiteMxtunnelVlanId struct {
	value *SiteMxtunnelVlanId
	isSet bool
}

func (v NullableSiteMxtunnelVlanId) Get() *SiteMxtunnelVlanId {
	return v.value
}

func (v *NullableSiteMxtunnelVlanId) Set(val *SiteMxtunnelVlanId) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMxtunnelVlanId) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMxtunnelVlanId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMxtunnelVlanId(val *SiteMxtunnelVlanId) *NullableSiteMxtunnelVlanId {
	return &NullableSiteMxtunnelVlanId{value: val, isSet: true}
}

func (v NullableSiteMxtunnelVlanId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMxtunnelVlanId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


