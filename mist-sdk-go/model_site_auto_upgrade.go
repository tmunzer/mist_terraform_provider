/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteAutoUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteAutoUpgrade{}

// SiteAutoUpgrade Auto Upgrade Settings
type SiteAutoUpgrade struct {
	// custom versions for different models. Property key is the model name (e.g. \"AP41\")
	CustomVersions *map[string]string `json:"custom_versions,omitempty"`
	DayOfWeek *DayOfWeek `json:"day_of_week,omitempty"`
	// whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
	Enabled *bool `json:"enabled,omitempty"`
	// any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
	TimeOfDay *string `json:"time_of_day,omitempty"`
	Version *SiteAutoUpgradeVersion `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteAutoUpgrade SiteAutoUpgrade

// NewSiteAutoUpgrade instantiates a new SiteAutoUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteAutoUpgrade() *SiteAutoUpgrade {
	this := SiteAutoUpgrade{}
	var enabled bool = false
	this.Enabled = &enabled
	var version SiteAutoUpgradeVersion = SITEAUTOUPGRADEVERSION_STABLE
	this.Version = &version
	return &this
}

// NewSiteAutoUpgradeWithDefaults instantiates a new SiteAutoUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteAutoUpgradeWithDefaults() *SiteAutoUpgrade {
	this := SiteAutoUpgrade{}
	var enabled bool = false
	this.Enabled = &enabled
	var version SiteAutoUpgradeVersion = SITEAUTOUPGRADEVERSION_STABLE
	this.Version = &version
	return &this
}

// GetCustomVersions returns the CustomVersions field value if set, zero value otherwise.
func (o *SiteAutoUpgrade) GetCustomVersions() map[string]string {
	if o == nil || IsNil(o.CustomVersions) {
		var ret map[string]string
		return ret
	}
	return *o.CustomVersions
}

// GetCustomVersionsOk returns a tuple with the CustomVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAutoUpgrade) GetCustomVersionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomVersions) {
		return nil, false
	}
	return o.CustomVersions, true
}

// HasCustomVersions returns a boolean if a field has been set.
func (o *SiteAutoUpgrade) HasCustomVersions() bool {
	if o != nil && !IsNil(o.CustomVersions) {
		return true
	}

	return false
}

// SetCustomVersions gets a reference to the given map[string]string and assigns it to the CustomVersions field.
func (o *SiteAutoUpgrade) SetCustomVersions(v map[string]string) {
	o.CustomVersions = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *SiteAutoUpgrade) GetDayOfWeek() DayOfWeek {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret DayOfWeek
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAutoUpgrade) GetDayOfWeekOk() (*DayOfWeek, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *SiteAutoUpgrade) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given DayOfWeek and assigns it to the DayOfWeek field.
func (o *SiteAutoUpgrade) SetDayOfWeek(v DayOfWeek) {
	o.DayOfWeek = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SiteAutoUpgrade) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAutoUpgrade) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SiteAutoUpgrade) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SiteAutoUpgrade) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTimeOfDay returns the TimeOfDay field value if set, zero value otherwise.
func (o *SiteAutoUpgrade) GetTimeOfDay() string {
	if o == nil || IsNil(o.TimeOfDay) {
		var ret string
		return ret
	}
	return *o.TimeOfDay
}

// GetTimeOfDayOk returns a tuple with the TimeOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAutoUpgrade) GetTimeOfDayOk() (*string, bool) {
	if o == nil || IsNil(o.TimeOfDay) {
		return nil, false
	}
	return o.TimeOfDay, true
}

// HasTimeOfDay returns a boolean if a field has been set.
func (o *SiteAutoUpgrade) HasTimeOfDay() bool {
	if o != nil && !IsNil(o.TimeOfDay) {
		return true
	}

	return false
}

// SetTimeOfDay gets a reference to the given string and assigns it to the TimeOfDay field.
func (o *SiteAutoUpgrade) SetTimeOfDay(v string) {
	o.TimeOfDay = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SiteAutoUpgrade) GetVersion() SiteAutoUpgradeVersion {
	if o == nil || IsNil(o.Version) {
		var ret SiteAutoUpgradeVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteAutoUpgrade) GetVersionOk() (*SiteAutoUpgradeVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SiteAutoUpgrade) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given SiteAutoUpgradeVersion and assigns it to the Version field.
func (o *SiteAutoUpgrade) SetVersion(v SiteAutoUpgradeVersion) {
	o.Version = &v
}

func (o SiteAutoUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteAutoUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomVersions) {
		toSerialize["custom_versions"] = o.CustomVersions
	}
	if !IsNil(o.DayOfWeek) {
		toSerialize["day_of_week"] = o.DayOfWeek
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TimeOfDay) {
		toSerialize["time_of_day"] = o.TimeOfDay
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteAutoUpgrade) UnmarshalJSON(data []byte) (err error) {
	varSiteAutoUpgrade := _SiteAutoUpgrade{}

	err = json.Unmarshal(data, &varSiteAutoUpgrade)

	if err != nil {
		return err
	}

	*o = SiteAutoUpgrade(varSiteAutoUpgrade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "custom_versions")
		delete(additionalProperties, "day_of_week")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "time_of_day")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteAutoUpgrade struct {
	value *SiteAutoUpgrade
	isSet bool
}

func (v NullableSiteAutoUpgrade) Get() *SiteAutoUpgrade {
	return v.value
}

func (v *NullableSiteAutoUpgrade) Set(val *SiteAutoUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteAutoUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteAutoUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteAutoUpgrade(val *SiteAutoUpgrade) *NullableSiteAutoUpgrade {
	return &NullableSiteAutoUpgrade{value: val, isSet: true}
}

func (v NullableSiteAutoUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteAutoUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


