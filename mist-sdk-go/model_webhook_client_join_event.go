/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookClientJoinEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookClientJoinEvent{}

// WebhookClientJoinEvent struct for WebhookClientJoinEvent
type WebhookClientJoinEvent struct {
	// mac address of the AP the client connected to
	Ap string `json:"ap"`
	// user-friendly name of the AP the client connected to.
	ApName string `json:"ap_name"`
	// 5GHz or 2.4GHz band
	Band string `json:"band"`
	Bssid string `json:"bssid"`
	// time when the user connects
	Connect int32 `json:"connect"`
	// floating point connect timestamp with millisecond precision
	ConnectFloat float32 `json:"connect_float"`
	// the clientâ€™s mac
	Mac string `json:"mac"`
	OrgId string `json:"org_id"`
	// RSSI when the client associated
	Rssi float32 `json:"rssi"`
	SiteId string `json:"site_id"`
	SiteName string `json:"site_name"`
	// ESSID
	Ssid string `json:"ssid"`
	Timestamp float32 `json:"timestamp"`
	// schema version of this message
	Version float32 `json:"version"`
	WlanId string `json:"wlan_id"`
	AdditionalProperties map[string]interface{}
}

type _WebhookClientJoinEvent WebhookClientJoinEvent

// NewWebhookClientJoinEvent instantiates a new WebhookClientJoinEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookClientJoinEvent(ap string, apName string, band string, bssid string, connect int32, connectFloat float32, mac string, orgId string, rssi float32, siteId string, siteName string, ssid string, timestamp float32, version float32, wlanId string) *WebhookClientJoinEvent {
	this := WebhookClientJoinEvent{}
	this.Ap = ap
	this.ApName = apName
	this.Band = band
	this.Bssid = bssid
	this.Connect = connect
	this.ConnectFloat = connectFloat
	this.Mac = mac
	this.OrgId = orgId
	this.Rssi = rssi
	this.SiteId = siteId
	this.SiteName = siteName
	this.Ssid = ssid
	this.Timestamp = timestamp
	this.Version = version
	this.WlanId = wlanId
	return &this
}

// NewWebhookClientJoinEventWithDefaults instantiates a new WebhookClientJoinEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookClientJoinEventWithDefaults() *WebhookClientJoinEvent {
	this := WebhookClientJoinEvent{}
	return &this
}

// GetAp returns the Ap field value
func (o *WebhookClientJoinEvent) GetAp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ap
}

// GetApOk returns a tuple with the Ap field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetApOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ap, true
}

// SetAp sets field value
func (o *WebhookClientJoinEvent) SetAp(v string) {
	o.Ap = v
}

// GetApName returns the ApName field value
func (o *WebhookClientJoinEvent) GetApName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApName
}

// GetApNameOk returns a tuple with the ApName field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetApNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApName, true
}

// SetApName sets field value
func (o *WebhookClientJoinEvent) SetApName(v string) {
	o.ApName = v
}

// GetBand returns the Band field value
func (o *WebhookClientJoinEvent) GetBand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Band
}

// GetBandOk returns a tuple with the Band field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetBandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band, true
}

// SetBand sets field value
func (o *WebhookClientJoinEvent) SetBand(v string) {
	o.Band = v
}

// GetBssid returns the Bssid field value
func (o *WebhookClientJoinEvent) GetBssid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetBssidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bssid, true
}

// SetBssid sets field value
func (o *WebhookClientJoinEvent) SetBssid(v string) {
	o.Bssid = v
}

// GetConnect returns the Connect field value
func (o *WebhookClientJoinEvent) GetConnect() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Connect
}

// GetConnectOk returns a tuple with the Connect field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetConnectOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connect, true
}

// SetConnect sets field value
func (o *WebhookClientJoinEvent) SetConnect(v int32) {
	o.Connect = v
}

// GetConnectFloat returns the ConnectFloat field value
func (o *WebhookClientJoinEvent) GetConnectFloat() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConnectFloat
}

// GetConnectFloatOk returns a tuple with the ConnectFloat field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetConnectFloatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectFloat, true
}

// SetConnectFloat sets field value
func (o *WebhookClientJoinEvent) SetConnectFloat(v float32) {
	o.ConnectFloat = v
}

// GetMac returns the Mac field value
func (o *WebhookClientJoinEvent) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *WebhookClientJoinEvent) SetMac(v string) {
	o.Mac = v
}

// GetOrgId returns the OrgId field value
func (o *WebhookClientJoinEvent) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *WebhookClientJoinEvent) SetOrgId(v string) {
	o.OrgId = v
}

// GetRssi returns the Rssi field value
func (o *WebhookClientJoinEvent) GetRssi() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetRssiOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rssi, true
}

// SetRssi sets field value
func (o *WebhookClientJoinEvent) SetRssi(v float32) {
	o.Rssi = v
}

// GetSiteId returns the SiteId field value
func (o *WebhookClientJoinEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookClientJoinEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetSiteName returns the SiteName field value
func (o *WebhookClientJoinEvent) GetSiteName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetSiteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteName, true
}

// SetSiteName sets field value
func (o *WebhookClientJoinEvent) SetSiteName(v string) {
	o.SiteName = v
}

// GetSsid returns the Ssid field value
func (o *WebhookClientJoinEvent) GetSsid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssid, true
}

// SetSsid sets field value
func (o *WebhookClientJoinEvent) SetSsid(v string) {
	o.Ssid = v
}

// GetTimestamp returns the Timestamp field value
func (o *WebhookClientJoinEvent) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebhookClientJoinEvent) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetVersion returns the Version field value
func (o *WebhookClientJoinEvent) GetVersion() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetVersionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *WebhookClientJoinEvent) SetVersion(v float32) {
	o.Version = v
}

// GetWlanId returns the WlanId field value
func (o *WebhookClientJoinEvent) GetWlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WlanId
}

// GetWlanIdOk returns a tuple with the WlanId field value
// and a boolean to check if the value has been set.
func (o *WebhookClientJoinEvent) GetWlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WlanId, true
}

// SetWlanId sets field value
func (o *WebhookClientJoinEvent) SetWlanId(v string) {
	o.WlanId = v
}

func (o WebhookClientJoinEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookClientJoinEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ap"] = o.Ap
	toSerialize["ap_name"] = o.ApName
	toSerialize["band"] = o.Band
	toSerialize["bssid"] = o.Bssid
	toSerialize["connect"] = o.Connect
	toSerialize["connect_float"] = o.ConnectFloat
	toSerialize["mac"] = o.Mac
	toSerialize["org_id"] = o.OrgId
	toSerialize["rssi"] = o.Rssi
	toSerialize["site_id"] = o.SiteId
	toSerialize["site_name"] = o.SiteName
	toSerialize["ssid"] = o.Ssid
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["version"] = o.Version
	toSerialize["wlan_id"] = o.WlanId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookClientJoinEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ap",
		"ap_name",
		"band",
		"bssid",
		"connect",
		"connect_float",
		"mac",
		"org_id",
		"rssi",
		"site_id",
		"site_name",
		"ssid",
		"timestamp",
		"version",
		"wlan_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookClientJoinEvent := _WebhookClientJoinEvent{}

	err = json.Unmarshal(data, &varWebhookClientJoinEvent)

	if err != nil {
		return err
	}

	*o = WebhookClientJoinEvent(varWebhookClientJoinEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "ap_name")
		delete(additionalProperties, "band")
		delete(additionalProperties, "bssid")
		delete(additionalProperties, "connect")
		delete(additionalProperties, "connect_float")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "site_name")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "version")
		delete(additionalProperties, "wlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookClientJoinEvent struct {
	value *WebhookClientJoinEvent
	isSet bool
}

func (v NullableWebhookClientJoinEvent) Get() *WebhookClientJoinEvent {
	return v.value
}

func (v *NullableWebhookClientJoinEvent) Set(val *WebhookClientJoinEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookClientJoinEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookClientJoinEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookClientJoinEvent(val *WebhookClientJoinEvent) *NullableWebhookClientJoinEvent {
	return &NullableWebhookClientJoinEvent{value: val, isSet: true}
}

func (v NullableWebhookClientJoinEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookClientJoinEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


