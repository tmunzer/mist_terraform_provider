/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosDhcpdConfigValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosDhcpdConfigValue{}

// JunosDhcpdConfigValue struct for JunosDhcpdConfigValue
type JunosDhcpdConfigValue struct {
	// when defined in template, this allows device to override
	Disabled *bool `json:"disabled,omitempty"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsServers []string `json:"dns_servers,omitempty"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsSuffix []string `json:"dns_suffix,omitempty"`
	// Property key is the MAC Address
	FixedBindings *map[string]JunosDhcpdConfigFixedBindingsValue `json:"fixed_bindings,omitempty"`
	// if `type`==`local` - optional, `ip` will be used if not provided
	Gateway *string `json:"gateway,omitempty"`
	// if `type`==`local`
	IpEnd *string `json:"ip_end,omitempty"`
	// if `type`==`local`
	IpStart *string `json:"ip_start,omitempty"`
	// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
	LeaseTime *int32 `json:"lease_time,omitempty"`
	// Property key is the DHCP option number
	Options *map[string]JunosDhcpdConfigOptionsValue `json:"options,omitempty"`
	// `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,  should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
	ServerIdOverride *bool `json:"server_id_override,omitempty"`
	// if `type`==`relay`
	Servers []string `json:"servers,omitempty"`
	// DHCP Server (local) or DHCP Relay (relay)
	Type *string `json:"type,omitempty"`
	// Property key is <enterprise number>:<sub option code>, with * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers) * sub option code: 1-255, sub-option code
	VendorEncapulated *map[string]JunosDhcpdConfigOptionsValue `json:"vendor_encapulated,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosDhcpdConfigValue JunosDhcpdConfigValue

// NewJunosDhcpdConfigValue instantiates a new JunosDhcpdConfigValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosDhcpdConfigValue() *JunosDhcpdConfigValue {
	this := JunosDhcpdConfigValue{}
	var disabled bool = false
	this.Disabled = &disabled
	var leaseTime int32 = 86400
	this.LeaseTime = &leaseTime
	var serverIdOverride bool = false
	this.ServerIdOverride = &serverIdOverride
	var type_ string = "local"
	this.Type = &type_
	return &this
}

// NewJunosDhcpdConfigValueWithDefaults instantiates a new JunosDhcpdConfigValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosDhcpdConfigValueWithDefaults() *JunosDhcpdConfigValue {
	this := JunosDhcpdConfigValue{}
	var disabled bool = false
	this.Disabled = &disabled
	var leaseTime int32 = 86400
	this.LeaseTime = &leaseTime
	var serverIdOverride bool = false
	this.ServerIdOverride = &serverIdOverride
	var type_ string = "local"
	this.Type = &type_
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *JunosDhcpdConfigValue) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetDnsServers() []string {
	if o == nil || IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasDnsServers() bool {
	if o != nil && !IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *JunosDhcpdConfigValue) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetDnsSuffix() []string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret []string
		return ret
	}
	return o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetDnsSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given []string and assigns it to the DnsSuffix field.
func (o *JunosDhcpdConfigValue) SetDnsSuffix(v []string) {
	o.DnsSuffix = v
}

// GetFixedBindings returns the FixedBindings field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetFixedBindings() map[string]JunosDhcpdConfigFixedBindingsValue {
	if o == nil || IsNil(o.FixedBindings) {
		var ret map[string]JunosDhcpdConfigFixedBindingsValue
		return ret
	}
	return *o.FixedBindings
}

// GetFixedBindingsOk returns a tuple with the FixedBindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetFixedBindingsOk() (*map[string]JunosDhcpdConfigFixedBindingsValue, bool) {
	if o == nil || IsNil(o.FixedBindings) {
		return nil, false
	}
	return o.FixedBindings, true
}

// HasFixedBindings returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasFixedBindings() bool {
	if o != nil && !IsNil(o.FixedBindings) {
		return true
	}

	return false
}

// SetFixedBindings gets a reference to the given map[string]JunosDhcpdConfigFixedBindingsValue and assigns it to the FixedBindings field.
func (o *JunosDhcpdConfigValue) SetFixedBindings(v map[string]JunosDhcpdConfigFixedBindingsValue) {
	o.FixedBindings = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *JunosDhcpdConfigValue) SetGateway(v string) {
	o.Gateway = &v
}

// GetIpEnd returns the IpEnd field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetIpEnd() string {
	if o == nil || IsNil(o.IpEnd) {
		var ret string
		return ret
	}
	return *o.IpEnd
}

// GetIpEndOk returns a tuple with the IpEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetIpEndOk() (*string, bool) {
	if o == nil || IsNil(o.IpEnd) {
		return nil, false
	}
	return o.IpEnd, true
}

// HasIpEnd returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasIpEnd() bool {
	if o != nil && !IsNil(o.IpEnd) {
		return true
	}

	return false
}

// SetIpEnd gets a reference to the given string and assigns it to the IpEnd field.
func (o *JunosDhcpdConfigValue) SetIpEnd(v string) {
	o.IpEnd = &v
}

// GetIpStart returns the IpStart field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetIpStart() string {
	if o == nil || IsNil(o.IpStart) {
		var ret string
		return ret
	}
	return *o.IpStart
}

// GetIpStartOk returns a tuple with the IpStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetIpStartOk() (*string, bool) {
	if o == nil || IsNil(o.IpStart) {
		return nil, false
	}
	return o.IpStart, true
}

// HasIpStart returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasIpStart() bool {
	if o != nil && !IsNil(o.IpStart) {
		return true
	}

	return false
}

// SetIpStart gets a reference to the given string and assigns it to the IpStart field.
func (o *JunosDhcpdConfigValue) SetIpStart(v string) {
	o.IpStart = &v
}

// GetLeaseTime returns the LeaseTime field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetLeaseTime() int32 {
	if o == nil || IsNil(o.LeaseTime) {
		var ret int32
		return ret
	}
	return *o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetLeaseTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LeaseTime) {
		return nil, false
	}
	return o.LeaseTime, true
}

// HasLeaseTime returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasLeaseTime() bool {
	if o != nil && !IsNil(o.LeaseTime) {
		return true
	}

	return false
}

// SetLeaseTime gets a reference to the given int32 and assigns it to the LeaseTime field.
func (o *JunosDhcpdConfigValue) SetLeaseTime(v int32) {
	o.LeaseTime = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetOptions() map[string]JunosDhcpdConfigOptionsValue {
	if o == nil || IsNil(o.Options) {
		var ret map[string]JunosDhcpdConfigOptionsValue
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetOptionsOk() (*map[string]JunosDhcpdConfigOptionsValue, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]JunosDhcpdConfigOptionsValue and assigns it to the Options field.
func (o *JunosDhcpdConfigValue) SetOptions(v map[string]JunosDhcpdConfigOptionsValue) {
	o.Options = &v
}

// GetServerIdOverride returns the ServerIdOverride field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetServerIdOverride() bool {
	if o == nil || IsNil(o.ServerIdOverride) {
		var ret bool
		return ret
	}
	return *o.ServerIdOverride
}

// GetServerIdOverrideOk returns a tuple with the ServerIdOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetServerIdOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.ServerIdOverride) {
		return nil, false
	}
	return o.ServerIdOverride, true
}

// HasServerIdOverride returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasServerIdOverride() bool {
	if o != nil && !IsNil(o.ServerIdOverride) {
		return true
	}

	return false
}

// SetServerIdOverride gets a reference to the given bool and assigns it to the ServerIdOverride field.
func (o *JunosDhcpdConfigValue) SetServerIdOverride(v bool) {
	o.ServerIdOverride = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetServers() []string {
	if o == nil || IsNil(o.Servers) {
		var ret []string
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetServersOk() ([]string, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []string and assigns it to the Servers field.
func (o *JunosDhcpdConfigValue) SetServers(v []string) {
	o.Servers = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JunosDhcpdConfigValue) SetType(v string) {
	o.Type = &v
}

// GetVendorEncapulated returns the VendorEncapulated field value if set, zero value otherwise.
func (o *JunosDhcpdConfigValue) GetVendorEncapulated() map[string]JunosDhcpdConfigOptionsValue {
	if o == nil || IsNil(o.VendorEncapulated) {
		var ret map[string]JunosDhcpdConfigOptionsValue
		return ret
	}
	return *o.VendorEncapulated
}

// GetVendorEncapulatedOk returns a tuple with the VendorEncapulated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpdConfigValue) GetVendorEncapulatedOk() (*map[string]JunosDhcpdConfigOptionsValue, bool) {
	if o == nil || IsNil(o.VendorEncapulated) {
		return nil, false
	}
	return o.VendorEncapulated, true
}

// HasVendorEncapulated returns a boolean if a field has been set.
func (o *JunosDhcpdConfigValue) HasVendorEncapulated() bool {
	if o != nil && !IsNil(o.VendorEncapulated) {
		return true
	}

	return false
}

// SetVendorEncapulated gets a reference to the given map[string]JunosDhcpdConfigOptionsValue and assigns it to the VendorEncapulated field.
func (o *JunosDhcpdConfigValue) SetVendorEncapulated(v map[string]JunosDhcpdConfigOptionsValue) {
	o.VendorEncapulated = &v
}

func (o JunosDhcpdConfigValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosDhcpdConfigValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DnsServers) {
		toSerialize["dns_servers"] = o.DnsServers
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["dns_suffix"] = o.DnsSuffix
	}
	if !IsNil(o.FixedBindings) {
		toSerialize["fixed_bindings"] = o.FixedBindings
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.IpEnd) {
		toSerialize["ip_end"] = o.IpEnd
	}
	if !IsNil(o.IpStart) {
		toSerialize["ip_start"] = o.IpStart
	}
	if !IsNil(o.LeaseTime) {
		toSerialize["lease_time"] = o.LeaseTime
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ServerIdOverride) {
		toSerialize["server_id_override"] = o.ServerIdOverride
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VendorEncapulated) {
		toSerialize["vendor_encapulated"] = o.VendorEncapulated
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosDhcpdConfigValue) UnmarshalJSON(data []byte) (err error) {
	varJunosDhcpdConfigValue := _JunosDhcpdConfigValue{}

	err = json.Unmarshal(data, &varJunosDhcpdConfigValue)

	if err != nil {
		return err
	}

	*o = JunosDhcpdConfigValue(varJunosDhcpdConfigValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "dns_servers")
		delete(additionalProperties, "dns_suffix")
		delete(additionalProperties, "fixed_bindings")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "ip_end")
		delete(additionalProperties, "ip_start")
		delete(additionalProperties, "lease_time")
		delete(additionalProperties, "options")
		delete(additionalProperties, "server_id_override")
		delete(additionalProperties, "servers")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vendor_encapulated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosDhcpdConfigValue struct {
	value *JunosDhcpdConfigValue
	isSet bool
}

func (v NullableJunosDhcpdConfigValue) Get() *JunosDhcpdConfigValue {
	return v.value
}

func (v *NullableJunosDhcpdConfigValue) Set(val *JunosDhcpdConfigValue) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosDhcpdConfigValue) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosDhcpdConfigValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosDhcpdConfigValue(val *JunosDhcpdConfigValue) *NullableJunosDhcpdConfigValue {
	return &NullableJunosDhcpdConfigValue{value: val, isSet: true}
}

func (v NullableJunosDhcpdConfigValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosDhcpdConfigValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


