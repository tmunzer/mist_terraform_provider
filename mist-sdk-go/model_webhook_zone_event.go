/*
Mist API

> Version: **2406.1.10** > > Date: **June 29, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.10
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookZoneEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookZoneEvent{}

// WebhookZoneEvent struct for WebhookZoneEvent
type WebhookZoneEvent struct {
	// uuid of named asset
	AssetId *string `json:"asset_id,omitempty"`
	// uuid of SDK-client
	Id string `json:"id"`
	// mac address of wifi client or asset
	Mac *string `json:"mac,omitempty"`
	// map id
	MapId string `json:"map_id"`
	// name of the client, may be empty
	Name *string `json:"name,omitempty"`
	SiteId string `json:"site_id"`
	// timestamp of the event, epoch
	Timestamp int32 `json:"timestamp"`
	Trigger WebhookZoneEventTrigger `json:"trigger"`
	Type string `json:"type"`
	// zone id
	ZoneId string `json:"zone_id"`
	AdditionalProperties map[string]interface{}
}

type _WebhookZoneEvent WebhookZoneEvent

// NewWebhookZoneEvent instantiates a new WebhookZoneEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookZoneEvent(id string, mapId string, siteId string, timestamp int32, trigger WebhookZoneEventTrigger, type_ string, zoneId string) *WebhookZoneEvent {
	this := WebhookZoneEvent{}
	this.Id = id
	this.MapId = mapId
	this.SiteId = siteId
	this.Timestamp = timestamp
	this.Trigger = trigger
	this.Type = type_
	this.ZoneId = zoneId
	return &this
}

// NewWebhookZoneEventWithDefaults instantiates a new WebhookZoneEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookZoneEventWithDefaults() *WebhookZoneEvent {
	this := WebhookZoneEvent{}
	return &this
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *WebhookZoneEvent) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *WebhookZoneEvent) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *WebhookZoneEvent) SetAssetId(v string) {
	o.AssetId = &v
}

// GetId returns the Id field value
func (o *WebhookZoneEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookZoneEvent) SetId(v string) {
	o.Id = v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *WebhookZoneEvent) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *WebhookZoneEvent) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *WebhookZoneEvent) SetMac(v string) {
	o.Mac = &v
}

// GetMapId returns the MapId field value
func (o *WebhookZoneEvent) GetMapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *WebhookZoneEvent) SetMapId(v string) {
	o.MapId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WebhookZoneEvent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WebhookZoneEvent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WebhookZoneEvent) SetName(v string) {
	o.Name = &v
}

// GetSiteId returns the SiteId field value
func (o *WebhookZoneEvent) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *WebhookZoneEvent) SetSiteId(v string) {
	o.SiteId = v
}

// GetTimestamp returns the Timestamp field value
func (o *WebhookZoneEvent) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *WebhookZoneEvent) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetTrigger returns the Trigger field value
func (o *WebhookZoneEvent) GetTrigger() WebhookZoneEventTrigger {
	if o == nil {
		var ret WebhookZoneEventTrigger
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetTriggerOk() (*WebhookZoneEventTrigger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *WebhookZoneEvent) SetTrigger(v WebhookZoneEventTrigger) {
	o.Trigger = v
}

// GetType returns the Type field value
func (o *WebhookZoneEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookZoneEvent) SetType(v string) {
	o.Type = v
}

// GetZoneId returns the ZoneId field value
func (o *WebhookZoneEvent) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *WebhookZoneEvent) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *WebhookZoneEvent) SetZoneId(v string) {
	o.ZoneId = v
}

func (o WebhookZoneEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookZoneEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	toSerialize["map_id"] = o.MapId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["site_id"] = o.SiteId
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["trigger"] = o.Trigger
	toSerialize["type"] = o.Type
	toSerialize["zone_id"] = o.ZoneId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookZoneEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"map_id",
		"site_id",
		"timestamp",
		"trigger",
		"type",
		"zone_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookZoneEvent := _WebhookZoneEvent{}

	err = json.Unmarshal(data, &varWebhookZoneEvent)

	if err != nil {
		return err
	}

	*o = WebhookZoneEvent(varWebhookZoneEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "trigger")
		delete(additionalProperties, "type")
		delete(additionalProperties, "zone_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookZoneEvent struct {
	value *WebhookZoneEvent
	isSet bool
}

func (v NullableWebhookZoneEvent) Get() *WebhookZoneEvent {
	return v.value
}

func (v *NullableWebhookZoneEvent) Set(val *WebhookZoneEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookZoneEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookZoneEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookZoneEvent(val *WebhookZoneEvent) *NullableWebhookZoneEvent {
	return &NullableWebhookZoneEvent{value: val, isSet: true}
}

func (v NullableWebhookZoneEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookZoneEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


