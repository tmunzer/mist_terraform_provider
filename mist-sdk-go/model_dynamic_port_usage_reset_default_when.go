/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// DynamicPortUsageResetDefaultWhen Control when the DPC port should be changed to the default port usage Configuring to none will let the DPC port keep at the current port usage.
type DynamicPortUsageResetDefaultWhen string

// List of dynamic_port_usage_reset_default_when
const (
	DYNAMICPORTUSAGERESETDEFAULTWHEN_EMPTY DynamicPortUsageResetDefaultWhen = ""
	DYNAMICPORTUSAGERESETDEFAULTWHEN_NONE DynamicPortUsageResetDefaultWhen = "none"
	DYNAMICPORTUSAGERESETDEFAULTWHEN_LINK_DOWN DynamicPortUsageResetDefaultWhen = "link_down"
)

// All allowed values of DynamicPortUsageResetDefaultWhen enum
var AllowedDynamicPortUsageResetDefaultWhenEnumValues = []DynamicPortUsageResetDefaultWhen{
	"",
	"none",
	"link_down",
}

func (v *DynamicPortUsageResetDefaultWhen) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DynamicPortUsageResetDefaultWhen(value)
	for _, existing := range AllowedDynamicPortUsageResetDefaultWhenEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DynamicPortUsageResetDefaultWhen", value)
}

// NewDynamicPortUsageResetDefaultWhenFromValue returns a pointer to a valid DynamicPortUsageResetDefaultWhen
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDynamicPortUsageResetDefaultWhenFromValue(v string) (*DynamicPortUsageResetDefaultWhen, error) {
	ev := DynamicPortUsageResetDefaultWhen(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DynamicPortUsageResetDefaultWhen: valid values are %v", v, AllowedDynamicPortUsageResetDefaultWhenEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DynamicPortUsageResetDefaultWhen) IsValid() bool {
	for _, existing := range AllowedDynamicPortUsageResetDefaultWhenEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dynamic_port_usage_reset_default_when value
func (v DynamicPortUsageResetDefaultWhen) Ptr() *DynamicPortUsageResetDefaultWhen {
	return &v
}

type NullableDynamicPortUsageResetDefaultWhen struct {
	value *DynamicPortUsageResetDefaultWhen
	isSet bool
}

func (v NullableDynamicPortUsageResetDefaultWhen) Get() *DynamicPortUsageResetDefaultWhen {
	return v.value
}

func (v *NullableDynamicPortUsageResetDefaultWhen) Set(val *DynamicPortUsageResetDefaultWhen) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicPortUsageResetDefaultWhen) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicPortUsageResetDefaultWhen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicPortUsageResetDefaultWhen(val *DynamicPortUsageResetDefaultWhen) *NullableDynamicPortUsageResetDefaultWhen {
	return &NullableDynamicPortUsageResetDefaultWhen{value: val, isSet: true}
}

func (v NullableDynamicPortUsageResetDefaultWhen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicPortUsageResetDefaultWhen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

