/*
Mist API

> Version: **2406.1.3** > > Date: **June 26, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.3
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SyslogServerFacility the model 'SyslogServerFacility'
type SyslogServerFacility string

// List of syslog_server_facility
const (
	SYSLOGSERVERFACILITY_ANY SyslogServerFacility = "any"
	SYSLOGSERVERFACILITY_AUTHORIZATION SyslogServerFacility = "authorization"
	SYSLOGSERVERFACILITY_CONFLICT_LOG SyslogServerFacility = "conflict-log"
	SYSLOGSERVERFACILITY_CHANGE_LOG SyslogServerFacility = "change-log"
	SYSLOGSERVERFACILITY_CONFIG SyslogServerFacility = "config"
	SYSLOGSERVERFACILITY_DAEMON SyslogServerFacility = "daemon"
	SYSLOGSERVERFACILITY_DFC SyslogServerFacility = "dfc"
	SYSLOGSERVERFACILITY_KERNEL SyslogServerFacility = "kernel"
	SYSLOGSERVERFACILITY_INTERACTIVE_COMMANDS SyslogServerFacility = "interactive-commands"
	SYSLOGSERVERFACILITY_FTP SyslogServerFacility = "ftp"
	SYSLOGSERVERFACILITY_FIREWALL SyslogServerFacility = "firewall"
	SYSLOGSERVERFACILITY_EXTERNAL SyslogServerFacility = "external"
	SYSLOGSERVERFACILITY_PFE SyslogServerFacility = "pfe"
	SYSLOGSERVERFACILITY_NTP SyslogServerFacility = "ntp"
	SYSLOGSERVERFACILITY_SECURITY SyslogServerFacility = "security"
	SYSLOGSERVERFACILITY_USER SyslogServerFacility = "user"
)

// All allowed values of SyslogServerFacility enum
var AllowedSyslogServerFacilityEnumValues = []SyslogServerFacility{
	"any",
	"authorization",
	"conflict-log",
	"change-log",
	"config",
	"daemon",
	"dfc",
	"kernel",
	"interactive-commands",
	"ftp",
	"firewall",
	"external",
	"pfe",
	"ntp",
	"security",
	"user",
}

func (v *SyslogServerFacility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SyslogServerFacility(value)
	for _, existing := range AllowedSyslogServerFacilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SyslogServerFacility", value)
}

// NewSyslogServerFacilityFromValue returns a pointer to a valid SyslogServerFacility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyslogServerFacilityFromValue(v string) (*SyslogServerFacility, error) {
	ev := SyslogServerFacility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SyslogServerFacility: valid values are %v", v, AllowedSyslogServerFacilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyslogServerFacility) IsValid() bool {
	for _, existing := range AllowedSyslogServerFacilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to syslog_server_facility value
func (v SyslogServerFacility) Ptr() *SyslogServerFacility {
	return &v
}

type NullableSyslogServerFacility struct {
	value *SyslogServerFacility
	isSet bool
}

func (v NullableSyslogServerFacility) Get() *SyslogServerFacility {
	return v.value
}

func (v *NullableSyslogServerFacility) Set(val *SyslogServerFacility) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogServerFacility) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogServerFacility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogServerFacility(val *SyslogServerFacility) *NullableSyslogServerFacility {
	return &NullableSyslogServerFacility{value: val, isSet: true}
}

func (v NullableSyslogServerFacility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogServerFacility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

