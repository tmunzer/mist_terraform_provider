/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SnmpVacmAccessRopertyPrefixListInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpVacmAccessRopertyPrefixListInner{}

// SnmpVacmAccessRopertyPrefixListInner struct for SnmpVacmAccessRopertyPrefixListInner
type SnmpVacmAccessRopertyPrefixListInner struct {
	// only required if `type`==`context_prefix`
	ContextPrefix *string `json:"context_prefix,omitempty"`
	// refer to view name
	NotifyView *string `json:"notify_view,omitempty"`
	// refer to view name
	ReadView *string `json:"read_view,omitempty"`
	SecurityLevel *string `json:"security_level,omitempty"`
	SecurityModel *string `json:"security_model,omitempty"`
	Type *string `json:"type,omitempty"`
	// refer to view name
	WriteView *string `json:"write_view,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnmpVacmAccessRopertyPrefixListInner SnmpVacmAccessRopertyPrefixListInner

// NewSnmpVacmAccessRopertyPrefixListInner instantiates a new SnmpVacmAccessRopertyPrefixListInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpVacmAccessRopertyPrefixListInner() *SnmpVacmAccessRopertyPrefixListInner {
	this := SnmpVacmAccessRopertyPrefixListInner{}
	return &this
}

// NewSnmpVacmAccessRopertyPrefixListInnerWithDefaults instantiates a new SnmpVacmAccessRopertyPrefixListInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpVacmAccessRopertyPrefixListInnerWithDefaults() *SnmpVacmAccessRopertyPrefixListInner {
	this := SnmpVacmAccessRopertyPrefixListInner{}
	return &this
}

// GetContextPrefix returns the ContextPrefix field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetContextPrefix() string {
	if o == nil || IsNil(o.ContextPrefix) {
		var ret string
		return ret
	}
	return *o.ContextPrefix
}

// GetContextPrefixOk returns a tuple with the ContextPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetContextPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.ContextPrefix) {
		return nil, false
	}
	return o.ContextPrefix, true
}

// HasContextPrefix returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasContextPrefix() bool {
	if o != nil && !IsNil(o.ContextPrefix) {
		return true
	}

	return false
}

// SetContextPrefix gets a reference to the given string and assigns it to the ContextPrefix field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetContextPrefix(v string) {
	o.ContextPrefix = &v
}

// GetNotifyView returns the NotifyView field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetNotifyView() string {
	if o == nil || IsNil(o.NotifyView) {
		var ret string
		return ret
	}
	return *o.NotifyView
}

// GetNotifyViewOk returns a tuple with the NotifyView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetNotifyViewOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyView) {
		return nil, false
	}
	return o.NotifyView, true
}

// HasNotifyView returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasNotifyView() bool {
	if o != nil && !IsNil(o.NotifyView) {
		return true
	}

	return false
}

// SetNotifyView gets a reference to the given string and assigns it to the NotifyView field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetNotifyView(v string) {
	o.NotifyView = &v
}

// GetReadView returns the ReadView field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetReadView() string {
	if o == nil || IsNil(o.ReadView) {
		var ret string
		return ret
	}
	return *o.ReadView
}

// GetReadViewOk returns a tuple with the ReadView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetReadViewOk() (*string, bool) {
	if o == nil || IsNil(o.ReadView) {
		return nil, false
	}
	return o.ReadView, true
}

// HasReadView returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasReadView() bool {
	if o != nil && !IsNil(o.ReadView) {
		return true
	}

	return false
}

// SetReadView gets a reference to the given string and assigns it to the ReadView field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetReadView(v string) {
	o.ReadView = &v
}

// GetSecurityLevel returns the SecurityLevel field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetSecurityLevel() string {
	if o == nil || IsNil(o.SecurityLevel) {
		var ret string
		return ret
	}
	return *o.SecurityLevel
}

// GetSecurityLevelOk returns a tuple with the SecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetSecurityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityLevel) {
		return nil, false
	}
	return o.SecurityLevel, true
}

// HasSecurityLevel returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasSecurityLevel() bool {
	if o != nil && !IsNil(o.SecurityLevel) {
		return true
	}

	return false
}

// SetSecurityLevel gets a reference to the given string and assigns it to the SecurityLevel field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetSecurityLevel(v string) {
	o.SecurityLevel = &v
}

// GetSecurityModel returns the SecurityModel field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetSecurityModel() string {
	if o == nil || IsNil(o.SecurityModel) {
		var ret string
		return ret
	}
	return *o.SecurityModel
}

// GetSecurityModelOk returns a tuple with the SecurityModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetSecurityModelOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityModel) {
		return nil, false
	}
	return o.SecurityModel, true
}

// HasSecurityModel returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasSecurityModel() bool {
	if o != nil && !IsNil(o.SecurityModel) {
		return true
	}

	return false
}

// SetSecurityModel gets a reference to the given string and assigns it to the SecurityModel field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetSecurityModel(v string) {
	o.SecurityModel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetType(v string) {
	o.Type = &v
}

// GetWriteView returns the WriteView field value if set, zero value otherwise.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetWriteView() string {
	if o == nil || IsNil(o.WriteView) {
		var ret string
		return ret
	}
	return *o.WriteView
}

// GetWriteViewOk returns a tuple with the WriteView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) GetWriteViewOk() (*string, bool) {
	if o == nil || IsNil(o.WriteView) {
		return nil, false
	}
	return o.WriteView, true
}

// HasWriteView returns a boolean if a field has been set.
func (o *SnmpVacmAccessRopertyPrefixListInner) HasWriteView() bool {
	if o != nil && !IsNil(o.WriteView) {
		return true
	}

	return false
}

// SetWriteView gets a reference to the given string and assigns it to the WriteView field.
func (o *SnmpVacmAccessRopertyPrefixListInner) SetWriteView(v string) {
	o.WriteView = &v
}

func (o SnmpVacmAccessRopertyPrefixListInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpVacmAccessRopertyPrefixListInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextPrefix) {
		toSerialize["context_prefix"] = o.ContextPrefix
	}
	if !IsNil(o.NotifyView) {
		toSerialize["notify_view"] = o.NotifyView
	}
	if !IsNil(o.ReadView) {
		toSerialize["read_view"] = o.ReadView
	}
	if !IsNil(o.SecurityLevel) {
		toSerialize["security_level"] = o.SecurityLevel
	}
	if !IsNil(o.SecurityModel) {
		toSerialize["security_model"] = o.SecurityModel
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WriteView) {
		toSerialize["write_view"] = o.WriteView
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnmpVacmAccessRopertyPrefixListInner) UnmarshalJSON(data []byte) (err error) {
	varSnmpVacmAccessRopertyPrefixListInner := _SnmpVacmAccessRopertyPrefixListInner{}

	err = json.Unmarshal(data, &varSnmpVacmAccessRopertyPrefixListInner)

	if err != nil {
		return err
	}

	*o = SnmpVacmAccessRopertyPrefixListInner(varSnmpVacmAccessRopertyPrefixListInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "context_prefix")
		delete(additionalProperties, "notify_view")
		delete(additionalProperties, "read_view")
		delete(additionalProperties, "security_level")
		delete(additionalProperties, "security_model")
		delete(additionalProperties, "type")
		delete(additionalProperties, "write_view")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpVacmAccessRopertyPrefixListInner struct {
	value *SnmpVacmAccessRopertyPrefixListInner
	isSet bool
}

func (v NullableSnmpVacmAccessRopertyPrefixListInner) Get() *SnmpVacmAccessRopertyPrefixListInner {
	return v.value
}

func (v *NullableSnmpVacmAccessRopertyPrefixListInner) Set(val *SnmpVacmAccessRopertyPrefixListInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpVacmAccessRopertyPrefixListInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpVacmAccessRopertyPrefixListInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpVacmAccessRopertyPrefixListInner(val *SnmpVacmAccessRopertyPrefixListInner) *NullableSnmpVacmAccessRopertyPrefixListInner {
	return &NullableSnmpVacmAccessRopertyPrefixListInner{value: val, isSet: true}
}

func (v NullableSnmpVacmAccessRopertyPrefixListInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpVacmAccessRopertyPrefixListInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


