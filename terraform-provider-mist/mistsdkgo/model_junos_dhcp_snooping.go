/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosDhcpSnooping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosDhcpSnooping{}

// JunosDhcpSnooping struct for JunosDhcpSnooping
type JunosDhcpSnooping struct {
	AllNetworks *bool `json:"all_networks,omitempty"`
	// Enable for dynamic ARP inspection check
	EnableArpSpoofCheck *bool `json:"enable_arp_spoof_check,omitempty"`
	// Enable for check for forging source IP address
	EnableIpSourceGuard *bool `json:"enable_ip_source_guard,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// if `all_networks`==`false`, list of network with DHCP snooping enabled
	Networks []string `json:"networks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosDhcpSnooping JunosDhcpSnooping

// NewJunosDhcpSnooping instantiates a new JunosDhcpSnooping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosDhcpSnooping() *JunosDhcpSnooping {
	this := JunosDhcpSnooping{}
	return &this
}

// NewJunosDhcpSnoopingWithDefaults instantiates a new JunosDhcpSnooping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosDhcpSnoopingWithDefaults() *JunosDhcpSnooping {
	this := JunosDhcpSnooping{}
	return &this
}

// GetAllNetworks returns the AllNetworks field value if set, zero value otherwise.
func (o *JunosDhcpSnooping) GetAllNetworks() bool {
	if o == nil || IsNil(o.AllNetworks) {
		var ret bool
		return ret
	}
	return *o.AllNetworks
}

// GetAllNetworksOk returns a tuple with the AllNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpSnooping) GetAllNetworksOk() (*bool, bool) {
	if o == nil || IsNil(o.AllNetworks) {
		return nil, false
	}
	return o.AllNetworks, true
}

// HasAllNetworks returns a boolean if a field has been set.
func (o *JunosDhcpSnooping) HasAllNetworks() bool {
	if o != nil && !IsNil(o.AllNetworks) {
		return true
	}

	return false
}

// SetAllNetworks gets a reference to the given bool and assigns it to the AllNetworks field.
func (o *JunosDhcpSnooping) SetAllNetworks(v bool) {
	o.AllNetworks = &v
}

// GetEnableArpSpoofCheck returns the EnableArpSpoofCheck field value if set, zero value otherwise.
func (o *JunosDhcpSnooping) GetEnableArpSpoofCheck() bool {
	if o == nil || IsNil(o.EnableArpSpoofCheck) {
		var ret bool
		return ret
	}
	return *o.EnableArpSpoofCheck
}

// GetEnableArpSpoofCheckOk returns a tuple with the EnableArpSpoofCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpSnooping) GetEnableArpSpoofCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableArpSpoofCheck) {
		return nil, false
	}
	return o.EnableArpSpoofCheck, true
}

// HasEnableArpSpoofCheck returns a boolean if a field has been set.
func (o *JunosDhcpSnooping) HasEnableArpSpoofCheck() bool {
	if o != nil && !IsNil(o.EnableArpSpoofCheck) {
		return true
	}

	return false
}

// SetEnableArpSpoofCheck gets a reference to the given bool and assigns it to the EnableArpSpoofCheck field.
func (o *JunosDhcpSnooping) SetEnableArpSpoofCheck(v bool) {
	o.EnableArpSpoofCheck = &v
}

// GetEnableIpSourceGuard returns the EnableIpSourceGuard field value if set, zero value otherwise.
func (o *JunosDhcpSnooping) GetEnableIpSourceGuard() bool {
	if o == nil || IsNil(o.EnableIpSourceGuard) {
		var ret bool
		return ret
	}
	return *o.EnableIpSourceGuard
}

// GetEnableIpSourceGuardOk returns a tuple with the EnableIpSourceGuard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpSnooping) GetEnableIpSourceGuardOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableIpSourceGuard) {
		return nil, false
	}
	return o.EnableIpSourceGuard, true
}

// HasEnableIpSourceGuard returns a boolean if a field has been set.
func (o *JunosDhcpSnooping) HasEnableIpSourceGuard() bool {
	if o != nil && !IsNil(o.EnableIpSourceGuard) {
		return true
	}

	return false
}

// SetEnableIpSourceGuard gets a reference to the given bool and assigns it to the EnableIpSourceGuard field.
func (o *JunosDhcpSnooping) SetEnableIpSourceGuard(v bool) {
	o.EnableIpSourceGuard = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JunosDhcpSnooping) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpSnooping) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JunosDhcpSnooping) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JunosDhcpSnooping) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *JunosDhcpSnooping) GetNetworks() []string {
	if o == nil || IsNil(o.Networks) {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosDhcpSnooping) GetNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *JunosDhcpSnooping) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *JunosDhcpSnooping) SetNetworks(v []string) {
	o.Networks = v
}

func (o JunosDhcpSnooping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosDhcpSnooping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllNetworks) {
		toSerialize["all_networks"] = o.AllNetworks
	}
	if !IsNil(o.EnableArpSpoofCheck) {
		toSerialize["enable_arp_spoof_check"] = o.EnableArpSpoofCheck
	}
	if !IsNil(o.EnableIpSourceGuard) {
		toSerialize["enable_ip_source_guard"] = o.EnableIpSourceGuard
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosDhcpSnooping) UnmarshalJSON(data []byte) (err error) {
	varJunosDhcpSnooping := _JunosDhcpSnooping{}

	err = json.Unmarshal(data, &varJunosDhcpSnooping)

	if err != nil {
		return err
	}

	*o = JunosDhcpSnooping(varJunosDhcpSnooping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "all_networks")
		delete(additionalProperties, "enable_arp_spoof_check")
		delete(additionalProperties, "enable_ip_source_guard")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "networks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosDhcpSnooping struct {
	value *JunosDhcpSnooping
	isSet bool
}

func (v NullableJunosDhcpSnooping) Get() *JunosDhcpSnooping {
	return v.value
}

func (v *NullableJunosDhcpSnooping) Set(val *JunosDhcpSnooping) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosDhcpSnooping) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosDhcpSnooping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosDhcpSnooping(val *JunosDhcpSnooping) *NullableJunosDhcpSnooping {
	return &NullableJunosDhcpSnooping{value: val, isSet: true}
}

func (v NullableJunosDhcpSnooping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosDhcpSnooping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


