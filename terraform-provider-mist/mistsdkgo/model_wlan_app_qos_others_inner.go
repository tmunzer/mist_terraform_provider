/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanAppQosOthersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanAppQosOthersInner{}

// WlanAppQosOthersInner struct for WlanAppQosOthersInner
type WlanAppQosOthersInner struct {
	Dscp *int32 `json:"dscp,omitempty"`
	DstSubnet *string `json:"dst_subnet,omitempty"`
	PortRanges *string `json:"port_ranges,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	SrcSubnet *string `json:"src_subnet,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanAppQosOthersInner WlanAppQosOthersInner

// NewWlanAppQosOthersInner instantiates a new WlanAppQosOthersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanAppQosOthersInner() *WlanAppQosOthersInner {
	this := WlanAppQosOthersInner{}
	return &this
}

// NewWlanAppQosOthersInnerWithDefaults instantiates a new WlanAppQosOthersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanAppQosOthersInnerWithDefaults() *WlanAppQosOthersInner {
	this := WlanAppQosOthersInner{}
	return &this
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *WlanAppQosOthersInner) GetDscp() int32 {
	if o == nil || IsNil(o.Dscp) {
		var ret int32
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAppQosOthersInner) GetDscpOk() (*int32, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *WlanAppQosOthersInner) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int32 and assigns it to the Dscp field.
func (o *WlanAppQosOthersInner) SetDscp(v int32) {
	o.Dscp = &v
}

// GetDstSubnet returns the DstSubnet field value if set, zero value otherwise.
func (o *WlanAppQosOthersInner) GetDstSubnet() string {
	if o == nil || IsNil(o.DstSubnet) {
		var ret string
		return ret
	}
	return *o.DstSubnet
}

// GetDstSubnetOk returns a tuple with the DstSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAppQosOthersInner) GetDstSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.DstSubnet) {
		return nil, false
	}
	return o.DstSubnet, true
}

// HasDstSubnet returns a boolean if a field has been set.
func (o *WlanAppQosOthersInner) HasDstSubnet() bool {
	if o != nil && !IsNil(o.DstSubnet) {
		return true
	}

	return false
}

// SetDstSubnet gets a reference to the given string and assigns it to the DstSubnet field.
func (o *WlanAppQosOthersInner) SetDstSubnet(v string) {
	o.DstSubnet = &v
}

// GetPortRanges returns the PortRanges field value if set, zero value otherwise.
func (o *WlanAppQosOthersInner) GetPortRanges() string {
	if o == nil || IsNil(o.PortRanges) {
		var ret string
		return ret
	}
	return *o.PortRanges
}

// GetPortRangesOk returns a tuple with the PortRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAppQosOthersInner) GetPortRangesOk() (*string, bool) {
	if o == nil || IsNil(o.PortRanges) {
		return nil, false
	}
	return o.PortRanges, true
}

// HasPortRanges returns a boolean if a field has been set.
func (o *WlanAppQosOthersInner) HasPortRanges() bool {
	if o != nil && !IsNil(o.PortRanges) {
		return true
	}

	return false
}

// SetPortRanges gets a reference to the given string and assigns it to the PortRanges field.
func (o *WlanAppQosOthersInner) SetPortRanges(v string) {
	o.PortRanges = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *WlanAppQosOthersInner) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAppQosOthersInner) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *WlanAppQosOthersInner) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *WlanAppQosOthersInner) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSrcSubnet returns the SrcSubnet field value if set, zero value otherwise.
func (o *WlanAppQosOthersInner) GetSrcSubnet() string {
	if o == nil || IsNil(o.SrcSubnet) {
		var ret string
		return ret
	}
	return *o.SrcSubnet
}

// GetSrcSubnetOk returns a tuple with the SrcSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAppQosOthersInner) GetSrcSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.SrcSubnet) {
		return nil, false
	}
	return o.SrcSubnet, true
}

// HasSrcSubnet returns a boolean if a field has been set.
func (o *WlanAppQosOthersInner) HasSrcSubnet() bool {
	if o != nil && !IsNil(o.SrcSubnet) {
		return true
	}

	return false
}

// SetSrcSubnet gets a reference to the given string and assigns it to the SrcSubnet field.
func (o *WlanAppQosOthersInner) SetSrcSubnet(v string) {
	o.SrcSubnet = &v
}

func (o WlanAppQosOthersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanAppQosOthersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.DstSubnet) {
		toSerialize["dst_subnet"] = o.DstSubnet
	}
	if !IsNil(o.PortRanges) {
		toSerialize["port_ranges"] = o.PortRanges
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.SrcSubnet) {
		toSerialize["src_subnet"] = o.SrcSubnet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanAppQosOthersInner) UnmarshalJSON(data []byte) (err error) {
	varWlanAppQosOthersInner := _WlanAppQosOthersInner{}

	err = json.Unmarshal(data, &varWlanAppQosOthersInner)

	if err != nil {
		return err
	}

	*o = WlanAppQosOthersInner(varWlanAppQosOthersInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dscp")
		delete(additionalProperties, "dst_subnet")
		delete(additionalProperties, "port_ranges")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "src_subnet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanAppQosOthersInner struct {
	value *WlanAppQosOthersInner
	isSet bool
}

func (v NullableWlanAppQosOthersInner) Get() *WlanAppQosOthersInner {
	return v.value
}

func (v *NullableWlanAppQosOthersInner) Set(val *WlanAppQosOthersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanAppQosOthersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanAppQosOthersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanAppQosOthersInner(val *WlanAppQosOthersInner) *NullableWlanAppQosOthersInner {
	return &NullableWlanAppQosOthersInner{value: val, isSet: true}
}

func (v NullableWlanAppQosOthersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanAppQosOthersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


