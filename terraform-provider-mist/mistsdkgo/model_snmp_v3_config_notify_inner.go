/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SnmpV3ConfigNotifyInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpV3ConfigNotifyInner{}

// SnmpV3ConfigNotifyInner struct for SnmpV3ConfigNotifyInner
type SnmpV3ConfigNotifyInner struct {
	Name *string `json:"name,omitempty"`
	Tag *string `json:"tag,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnmpV3ConfigNotifyInner SnmpV3ConfigNotifyInner

// NewSnmpV3ConfigNotifyInner instantiates a new SnmpV3ConfigNotifyInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpV3ConfigNotifyInner() *SnmpV3ConfigNotifyInner {
	this := SnmpV3ConfigNotifyInner{}
	return &this
}

// NewSnmpV3ConfigNotifyInnerWithDefaults instantiates a new SnmpV3ConfigNotifyInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpV3ConfigNotifyInnerWithDefaults() *SnmpV3ConfigNotifyInner {
	this := SnmpV3ConfigNotifyInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SnmpV3ConfigNotifyInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3ConfigNotifyInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SnmpV3ConfigNotifyInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SnmpV3ConfigNotifyInner) SetName(v string) {
	o.Name = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SnmpV3ConfigNotifyInner) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3ConfigNotifyInner) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SnmpV3ConfigNotifyInner) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *SnmpV3ConfigNotifyInner) SetTag(v string) {
	o.Tag = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SnmpV3ConfigNotifyInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpV3ConfigNotifyInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SnmpV3ConfigNotifyInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SnmpV3ConfigNotifyInner) SetType(v string) {
	o.Type = &v
}

func (o SnmpV3ConfigNotifyInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpV3ConfigNotifyInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnmpV3ConfigNotifyInner) UnmarshalJSON(data []byte) (err error) {
	varSnmpV3ConfigNotifyInner := _SnmpV3ConfigNotifyInner{}

	err = json.Unmarshal(data, &varSnmpV3ConfigNotifyInner)

	if err != nil {
		return err
	}

	*o = SnmpV3ConfigNotifyInner(varSnmpV3ConfigNotifyInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpV3ConfigNotifyInner struct {
	value *SnmpV3ConfigNotifyInner
	isSet bool
}

func (v NullableSnmpV3ConfigNotifyInner) Get() *SnmpV3ConfigNotifyInner {
	return v.value
}

func (v *NullableSnmpV3ConfigNotifyInner) Set(val *SnmpV3ConfigNotifyInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpV3ConfigNotifyInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpV3ConfigNotifyInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpV3ConfigNotifyInner(val *SnmpV3ConfigNotifyInner) *NullableSnmpV3ConfigNotifyInner {
	return &NullableSnmpV3ConfigNotifyInner{value: val, isSet: true}
}

func (v NullableSnmpV3ConfigNotifyInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpV3ConfigNotifyInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


