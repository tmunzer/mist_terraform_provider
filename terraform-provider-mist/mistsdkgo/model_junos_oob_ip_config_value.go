/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosOobIpConfigValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosOobIpConfigValue{}

// JunosOobIpConfigValue - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
type JunosOobIpConfigValue struct {
	Ip *string `json:"ip,omitempty"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `json:"netmask,omitempty"`
	// optional, the network to be used for mgmt
	Network *string `json:"network,omitempty"`
	Type *IpConfigType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosOobIpConfigValue JunosOobIpConfigValue

// NewJunosOobIpConfigValue instantiates a new JunosOobIpConfigValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosOobIpConfigValue() *JunosOobIpConfigValue {
	this := JunosOobIpConfigValue{}
	var type_ IpConfigType = IPCONFIGTYPE_DYNAMIC
	this.Type = &type_
	return &this
}

// NewJunosOobIpConfigValueWithDefaults instantiates a new JunosOobIpConfigValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosOobIpConfigValueWithDefaults() *JunosOobIpConfigValue {
	this := JunosOobIpConfigValue{}
	var type_ IpConfigType = IPCONFIGTYPE_DYNAMIC
	this.Type = &type_
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *JunosOobIpConfigValue) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigValue) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *JunosOobIpConfigValue) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *JunosOobIpConfigValue) SetIp(v string) {
	o.Ip = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *JunosOobIpConfigValue) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigValue) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *JunosOobIpConfigValue) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *JunosOobIpConfigValue) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *JunosOobIpConfigValue) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigValue) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *JunosOobIpConfigValue) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *JunosOobIpConfigValue) SetNetwork(v string) {
	o.Network = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JunosOobIpConfigValue) GetType() IpConfigType {
	if o == nil || IsNil(o.Type) {
		var ret IpConfigType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigValue) GetTypeOk() (*IpConfigType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JunosOobIpConfigValue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IpConfigType and assigns it to the Type field.
func (o *JunosOobIpConfigValue) SetType(v IpConfigType) {
	o.Type = &v
}

func (o JunosOobIpConfigValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosOobIpConfigValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosOobIpConfigValue) UnmarshalJSON(data []byte) (err error) {
	varJunosOobIpConfigValue := _JunosOobIpConfigValue{}

	err = json.Unmarshal(data, &varJunosOobIpConfigValue)

	if err != nil {
		return err
	}

	*o = JunosOobIpConfigValue(varJunosOobIpConfigValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "network")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosOobIpConfigValue struct {
	value *JunosOobIpConfigValue
	isSet bool
}

func (v NullableJunosOobIpConfigValue) Get() *JunosOobIpConfigValue {
	return v.value
}

func (v *NullableJunosOobIpConfigValue) Set(val *JunosOobIpConfigValue) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosOobIpConfigValue) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosOobIpConfigValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosOobIpConfigValue(val *JunosOobIpConfigValue) *NullableJunosOobIpConfigValue {
	return &NullableJunosOobIpConfigValue{value: val, isSet: true}
}

func (v NullableJunosOobIpConfigValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosOobIpConfigValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


