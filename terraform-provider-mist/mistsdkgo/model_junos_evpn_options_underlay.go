/*
Mist API

> Version: **2405.1.6** > > Date: **June 6, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location-services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2405.1.6
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosEvpnOptionsUnderlay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosEvpnOptionsUnderlay{}

// JunosEvpnOptionsUnderlay struct for JunosEvpnOptionsUnderlay
type JunosEvpnOptionsUnderlay struct {
	AsBase *int32 `json:"as_base,omitempty"`
	RoutedIdPrefix *string `json:"routed_id_prefix,omitempty"`
	// underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
	Subnet *string `json:"subnet,omitempty"`
	// if v6 is desired for underlay
	UseIpv6 *bool `json:"use_ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosEvpnOptionsUnderlay JunosEvpnOptionsUnderlay

// NewJunosEvpnOptionsUnderlay instantiates a new JunosEvpnOptionsUnderlay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosEvpnOptionsUnderlay() *JunosEvpnOptionsUnderlay {
	this := JunosEvpnOptionsUnderlay{}
	var useIpv6 bool = false
	this.UseIpv6 = &useIpv6
	return &this
}

// NewJunosEvpnOptionsUnderlayWithDefaults instantiates a new JunosEvpnOptionsUnderlay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosEvpnOptionsUnderlayWithDefaults() *JunosEvpnOptionsUnderlay {
	this := JunosEvpnOptionsUnderlay{}
	var useIpv6 bool = false
	this.UseIpv6 = &useIpv6
	return &this
}

// GetAsBase returns the AsBase field value if set, zero value otherwise.
func (o *JunosEvpnOptionsUnderlay) GetAsBase() int32 {
	if o == nil || IsNil(o.AsBase) {
		var ret int32
		return ret
	}
	return *o.AsBase
}

// GetAsBaseOk returns a tuple with the AsBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosEvpnOptionsUnderlay) GetAsBaseOk() (*int32, bool) {
	if o == nil || IsNil(o.AsBase) {
		return nil, false
	}
	return o.AsBase, true
}

// HasAsBase returns a boolean if a field has been set.
func (o *JunosEvpnOptionsUnderlay) HasAsBase() bool {
	if o != nil && !IsNil(o.AsBase) {
		return true
	}

	return false
}

// SetAsBase gets a reference to the given int32 and assigns it to the AsBase field.
func (o *JunosEvpnOptionsUnderlay) SetAsBase(v int32) {
	o.AsBase = &v
}

// GetRoutedIdPrefix returns the RoutedIdPrefix field value if set, zero value otherwise.
func (o *JunosEvpnOptionsUnderlay) GetRoutedIdPrefix() string {
	if o == nil || IsNil(o.RoutedIdPrefix) {
		var ret string
		return ret
	}
	return *o.RoutedIdPrefix
}

// GetRoutedIdPrefixOk returns a tuple with the RoutedIdPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosEvpnOptionsUnderlay) GetRoutedIdPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.RoutedIdPrefix) {
		return nil, false
	}
	return o.RoutedIdPrefix, true
}

// HasRoutedIdPrefix returns a boolean if a field has been set.
func (o *JunosEvpnOptionsUnderlay) HasRoutedIdPrefix() bool {
	if o != nil && !IsNil(o.RoutedIdPrefix) {
		return true
	}

	return false
}

// SetRoutedIdPrefix gets a reference to the given string and assigns it to the RoutedIdPrefix field.
func (o *JunosEvpnOptionsUnderlay) SetRoutedIdPrefix(v string) {
	o.RoutedIdPrefix = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *JunosEvpnOptionsUnderlay) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosEvpnOptionsUnderlay) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *JunosEvpnOptionsUnderlay) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *JunosEvpnOptionsUnderlay) SetSubnet(v string) {
	o.Subnet = &v
}

// GetUseIpv6 returns the UseIpv6 field value if set, zero value otherwise.
func (o *JunosEvpnOptionsUnderlay) GetUseIpv6() bool {
	if o == nil || IsNil(o.UseIpv6) {
		var ret bool
		return ret
	}
	return *o.UseIpv6
}

// GetUseIpv6Ok returns a tuple with the UseIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosEvpnOptionsUnderlay) GetUseIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseIpv6) {
		return nil, false
	}
	return o.UseIpv6, true
}

// HasUseIpv6 returns a boolean if a field has been set.
func (o *JunosEvpnOptionsUnderlay) HasUseIpv6() bool {
	if o != nil && !IsNil(o.UseIpv6) {
		return true
	}

	return false
}

// SetUseIpv6 gets a reference to the given bool and assigns it to the UseIpv6 field.
func (o *JunosEvpnOptionsUnderlay) SetUseIpv6(v bool) {
	o.UseIpv6 = &v
}

func (o JunosEvpnOptionsUnderlay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosEvpnOptionsUnderlay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsBase) {
		toSerialize["as_base"] = o.AsBase
	}
	if !IsNil(o.RoutedIdPrefix) {
		toSerialize["routed_id_prefix"] = o.RoutedIdPrefix
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.UseIpv6) {
		toSerialize["use_ipv6"] = o.UseIpv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosEvpnOptionsUnderlay) UnmarshalJSON(data []byte) (err error) {
	varJunosEvpnOptionsUnderlay := _JunosEvpnOptionsUnderlay{}

	err = json.Unmarshal(data, &varJunosEvpnOptionsUnderlay)

	if err != nil {
		return err
	}

	*o = JunosEvpnOptionsUnderlay(varJunosEvpnOptionsUnderlay)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "as_base")
		delete(additionalProperties, "routed_id_prefix")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "use_ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosEvpnOptionsUnderlay struct {
	value *JunosEvpnOptionsUnderlay
	isSet bool
}

func (v NullableJunosEvpnOptionsUnderlay) Get() *JunosEvpnOptionsUnderlay {
	return v.value
}

func (v *NullableJunosEvpnOptionsUnderlay) Set(val *JunosEvpnOptionsUnderlay) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosEvpnOptionsUnderlay) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosEvpnOptionsUnderlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosEvpnOptionsUnderlay(val *JunosEvpnOptionsUnderlay) *NullableJunosEvpnOptionsUnderlay {
	return &NullableJunosEvpnOptionsUnderlay{value: val, isSet: true}
}

func (v NullableJunosEvpnOptionsUnderlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosEvpnOptionsUnderlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


